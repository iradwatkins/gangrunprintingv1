#!/bin/bash

#
# GIT SAFETY HOOK - Prevents committing to wrong repository
# This should be placed in .git/hooks/pre-commit or .husky/pre-commit
#

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "🔒 Git Safety Check: Verifying project boundary..."

# Step 1: Check if .project-boundary exists
if [ ! -f ".project-boundary" ]; then
    echo -e "${YELLOW}⚠️  Warning: No .project-boundary file found${NC}"
    echo -e "${YELLOW}Cannot verify project isolation${NC}"
    # Don't fail - just warn
fi

# Step 2: Get current directory
CURRENT_DIR=$(pwd)
PROJECT_NAME=$(basename "$CURRENT_DIR")

# Step 3: Verify git remote
GIT_REMOTE=$(git remote get-url origin 2>/dev/null || echo "none")

if [ -f ".project-boundary" ]; then
    # Step 4: Parse expected repository from boundary file
    EXPECTED_REPO=$(cat .project-boundary | grep '"remote"' | cut -d'"' -f4)

    if [ -n "$EXPECTED_REPO" ] && [ "$GIT_REMOTE" != "$EXPECTED_REPO" ]; then
        echo -e "${RED}❌ GIT REPOSITORY MISMATCH!${NC}"
        echo -e "${RED}═══════════════════════════════════════${NC}"
        echo -e "${YELLOW}Expected repo: $EXPECTED_REPO${NC}"
        echo -e "${YELLOW}Current repo:  $GIT_REMOTE${NC}"
        echo -e "${RED}═══════════════════════════════════════${NC}"
        echo -e "${RED}COMMIT BLOCKED!${NC}"
        echo -e "${YELLOW}You are trying to commit to the WRONG repository!${NC}"
        echo -e "${YELLOW}Please check your working directory and try again.${NC}"
        exit 1
    fi
fi

# Step 5: Verify we're in correct project directory
if [ -f ".project-boundary" ]; then
    EXPECTED_ROOT=$(cat .project-boundary | grep '"projectRoot"' | cut -d'"' -f4)

    if [ "$CURRENT_DIR" != "$EXPECTED_ROOT" ]; then
        echo -e "${RED}❌ PROJECT ROOT MISMATCH!${NC}"
        echo -e "${YELLOW}Expected: $EXPECTED_ROOT${NC}"
        echo -e "${YELLOW}Current:  $CURRENT_DIR${NC}"
        echo -e "${RED}COMMIT BLOCKED!${NC}"
        exit 1
    fi
fi

# Step 6: Check for suspicious file paths in staged files
STAGED_FILES=$(git diff --cached --name-only)

if [ -n "$STAGED_FILES" ]; then
    echo "Checking staged files for cross-project contamination..."

    echo "$STAGED_FILES" | while IFS= read -r file; do
        # Check if file path contains other project names
        if echo "$file" | grep -E "(gangrunprinting|taxgeniuspro|agistaffers|stepperslife)" | grep -v "$PROJECT_NAME" > /dev/null; then
            echo -e "${RED}❌ SUSPICIOUS FILE DETECTED!${NC}"
            echo -e "${YELLOW}File: $file${NC}"
            echo -e "${YELLOW}This file appears to be from another project!${NC}"
            echo -e "${RED}COMMIT BLOCKED!${NC}"
            exit 1
        fi
    done
fi

# Step 7: Success
echo -e "${GREEN}✓ Git safety check passed${NC}"
echo -e "${GREEN}✓ Repository: $PROJECT_NAME${NC}"
echo -e "${GREEN}✓ Remote: $GIT_REMOTE${NC}"
echo ""

# Continue with quality checks (if configured)
if command -v npm &> /dev/null && [ -f "package.json" ]; then
    if npm run quality > /dev/null 2>&1; then
        :  # Quality checks exist, they'll run after this hook
    fi
fi

exit 0
