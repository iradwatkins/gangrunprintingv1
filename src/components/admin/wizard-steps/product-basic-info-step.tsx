'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

import { Alert, AlertDescription } from '@/components/ui/alert'
import { ProductImageUpload } from '../product-image-upload'
import { Info, Package, Camera, Sparkles, RefreshCw } from 'lucide-react'
import { generateSKU, generateUniqueSKU, isValidSKU } from '@/lib/utils/sku-generator'
import toast from '@/lib/toast'

interface ProductData {
  name: string
  slug: string
  sku: string
  categoryId: string
  description: string
  shortDescription: string
  isActive: boolean
  isFeatured: boolean
  images: unknown[]
}

interface ProductBasicInfoStepProps {
  formData: ProductData
  onUpdate: (updates: Partial<ProductData>) => void
  onValidationChange: (isValid: boolean) => void
}

export function ProductBasicInfoStep({
  formData,
  onUpdate,
  onValidationChange,
}: ProductBasicInfoStepProps) {
  const [categories, setCategories] = useState<any[]>([])
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [generatingSKU, setGeneratingSKU] = useState(false)

  useEffect(() => {
    fetchCategories()
  }, [])

  useEffect(() => {
    validateStep()
  }, [formData])

  const fetchCategories = async () => {
    try {
      const res = await fetch('/api/product-categories')
      if (res.ok) {
        const data = await res.json()
        setCategories(data)
      }
    } catch (error) {
      }
  }

  const generateSlug = (name: string) => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '')
  }

  const validateStep = () => {
    const newErrors: Record<string, string> = {}

    // Required field validations
    if (!formData.name.trim()) {
      newErrors.name = 'Product name is required'
    }

    if (!formData.sku.trim()) {
      newErrors.sku = 'SKU is required'
    }

    if (!formData.categoryId) {
      newErrors.categoryId = 'Category is required'
    }

    if (formData.images.length === 0) {
      newErrors.images = 'At least one product image is required'
    }

    setErrors(newErrors)
    const isValid = Object.keys(newErrors).length === 0
    onValidationChange(isValid)
  }

  const handleNameChange = (name: string) => {
    const updates: Partial<ProductData> = {
      name,
      slug: generateSlug(name),
    }

    // Auto-generate SKU if it's empty or was previously auto-generated
    if (!formData.sku || isAutoGeneratedSKU(formData.sku)) {
      const category = categories.find((cat) => cat.id === formData.categoryId)
      const newSKU = generateSKU(name, category?.name || category?.slug)
      updates.sku = newSKU
    }

    onUpdate(updates)
  }

  const handleCategoryChange = (categoryId: string) => {
    const category = categories.find((cat) => cat.id === categoryId)
    const updates: Partial<ProductData> = { categoryId }

    // Auto-generate SKU if it's empty or was previously auto-generated
    if (!formData.sku || isAutoGeneratedSKU(formData.sku)) {
      const newSKU = generateSKU(formData.name, category?.name || category?.slug)
      updates.sku = newSKU
    }

    onUpdate(updates)
  }

  const handleGenerateSKU = async () => {
    if (!formData.name.trim()) {
      toast.error('Please enter a product name first')
      return
    }

    setGeneratingSKU(true)
    try {
      const category = categories.find((cat) => cat.id === formData.categoryId)
      const newSKU = await generateUniqueSKU(formData.name, category?.name || category?.slug)
      onUpdate({ sku: newSKU })
      toast.success('SKU generated successfully')
    } catch (error) {
      toast.error('Failed to generate SKU')
    } finally {
      setGeneratingSKU(false)
    }
  }

  const isAutoGeneratedSKU = (sku: string): boolean => {
    // Check if SKU follows our auto-generated pattern
    return /^[A-Z]{2,4}-[A-Z]{3}-\d{4}-[A-Z0-9]{4}$/.test(sku)
  }

  const hasMainImage = formData.images.some((img) => img.isPrimary)
  const sampleImages = formData.images.filter((img) => !img.isPrimary)

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Package className="h-5 w-5 text-primary" />
            </div>
            <div>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Set up the essential details and images for your product
              </CardDescription>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Basic Information Form */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Product Details</CardTitle>
          <CardDescription>
            Essential information that will appear on your product listings
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="name">Product Name *</Label>
              <Input
                className={errors.name ? 'border-red-500' : ''}
                id="name"
                placeholder="e.g., Business Cards - Premium"
                value={formData.name}
                onChange={(e) => handleNameChange(e.target.value)}
              />
              {errors.name && <p className="text-sm text-red-500">{errors.name}</p>}
            </div>
            <div className="space-y-2">
              <Label htmlFor="slug">URL Slug</Label>
              <Input
                id="slug"
                placeholder="business-cards-premium"
                value={formData.slug}
                onChange={(e) => onUpdate({ slug: e.target.value })}
              />
              <p className="text-xs text-muted-foreground">Auto-generated from product name</p>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="sku">SKU *</Label>
                <Button
                  className="h-6 px-2 text-xs"
                  disabled={generatingSKU}
                  size="sm"
                  type="button"
                  variant="outline"
                  onClick={handleGenerateSKU}
                >
                  {generatingSKU ? (
                    <RefreshCw className="h-3 w-3 animate-spin mr-1" />
                  ) : (
                    <Sparkles className="h-3 w-3 mr-1" />
                  )}
                  {generatingSKU ? 'Generating...' : 'Auto Generate'}
                </Button>
              </div>
              <Input
                className={errors.sku ? 'border-red-500' : ''}
                id="sku"
                placeholder="Auto-generated or enter custom SKU"
                value={formData.sku}
                onChange={(e) => onUpdate({ sku: e.target.value.toUpperCase() })}
              />
              <div className="flex items-start gap-2">
                {errors.sku && <p className="text-sm text-red-500">{errors.sku}</p>}
                {formData.sku && isValidSKU(formData.sku) && (
                  <div className="flex items-center gap-1">
                    <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                    <p className="text-xs text-green-600">Valid for marketplaces</p>
                  </div>
                )}
                {formData.sku && !isValidSKU(formData.sku) && (
                  <div className="flex items-center gap-1">
                    <div className="h-2 w-2 bg-red-500 rounded-full"></div>
                    <p className="text-xs text-red-600">Invalid SKU format</p>
                  </div>
                )}
              </div>
              {!formData.sku && (
                <p className="text-xs text-muted-foreground">
                  SKU will be auto-generated when you enter a product name
                </p>
              )}
            </div>
            <div className="space-y-2">
              <Label htmlFor="category">Category *</Label>
              <Select value={formData.categoryId} onValueChange={handleCategoryChange}>
                <SelectTrigger className={errors.categoryId ? 'border-red-500' : ''}>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((cat: Record<string, unknown>) => (
                    <SelectItem key={cat.id} value={cat.id}>
                      {cat.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.categoryId && <p className="text-sm text-red-500">{errors.categoryId}</p>}
              <p className="text-xs text-muted-foreground">
                Category affects SKU generation and product organization
              </p>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="shortDescription">Short Description</Label>
            <Textarea
              id="shortDescription"
              placeholder="Brief product description for listings (appears in search results and category pages)"
              rows={2}
              value={formData.shortDescription}
              onChange={(e) => onUpdate({ shortDescription: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Full Description</Label>
            <Textarea
              id="description"
              placeholder="Detailed product description with specifications, features, and benefits"
              rows={4}
              value={formData.description}
              onChange={(e) => onUpdate({ description: e.target.value })}
            />
          </div>
        </CardContent>
      </Card>

      {/* SKU Information */}
      <Card>
        <CardHeader>
          <div className="flex items-center gap-3">
            <div className="p-2 bg-green-100 rounded-lg">
              <Info className="h-5 w-5 text-green-600" />
            </div>
            <div>
              <CardTitle className="text-lg">SKU Requirements</CardTitle>
              <CardDescription>
                Understanding SKU compatibility for online marketplaces
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <h4 className="font-medium text-sm">Auto-Generated Format</h4>
              <div className="p-3 bg-gray-50 rounded-lg font-mono text-sm">
                [CATEGORY]-[TYPE]-[YEAR]-[RANDOM]
              </div>
              <p className="text-xs text-muted-foreground">
                Example: BC-STD-2024-A7B3 (Business Cards - Standard - 2024 - Random Code)
              </p>
            </div>
            <div className="space-y-3">
              <h4 className="font-medium text-sm">Marketplace Compatibility</h4>
              <ul className="text-xs space-y-1">
                <li className="flex items-center gap-2">
                  <div className="h-1.5 w-1.5 bg-green-500 rounded-full"></div>
                  Google Merchant Center
                </li>
                <li className="flex items-center gap-2">
                  <div className="h-1.5 w-1.5 bg-green-500 rounded-full"></div>
                  Amazon Marketplace
                </li>
                <li className="flex items-center gap-2">
                  <div className="h-1.5 w-1.5 bg-green-500 rounded-full"></div>
                  eBay Store
                </li>
                <li className="flex items-center gap-2">
                  <div className="h-1.5 w-1.5 bg-green-500 rounded-full"></div>
                  Facebook Shop
                </li>
              </ul>
            </div>
          </div>
          <Alert className="mt-4">
            <Info className="h-4 w-4" />
            <AlertDescription className="text-sm">
              <strong>Auto-Generation:</strong> SKUs are automatically generated when you enter a
              product name and select a category. You can also manually create a custom SKU or click
              "Auto Generate" to create a new unique SKU.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>

      {/* Product Images */}
      <Card>
        <CardHeader>
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Camera className="h-5 w-5 text-blue-600" />
            </div>
            <div>
              <CardTitle className="text-lg">Product Images</CardTitle>
              <CardDescription>
                Upload your main product image and optional sample images
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {errors.images && (
            <Alert variant="destructive">
              <Info className="h-4 w-4" />
              <AlertDescription>{errors.images}</AlertDescription>
            </Alert>
          )}

          <ProductImageUpload
            images={formData.images}
            onImagesChange={(images) => onUpdate({ images })}
          />

          {/* Image Guidelines */}
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">Image Guidelines</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>
                • <strong>Main Image:</strong> Required. This will be the primary image shown in
                listings
              </li>
              <li>
                • <strong>Sample Images:</strong> Optional. Show different variations or examples of
                your work
              </li>
              <li>
                • <strong>Format:</strong> JPG, PNG, or WebP. Maximum 5MB per image
              </li>
              <li>
                • <strong>Quality:</strong> High resolution (minimum 800x600) for best results
              </li>
              {!hasMainImage && (
                <li className="text-red-600 font-medium">
                  • You must set one image as the main image
                </li>
              )}
            </ul>
          </div>

          {/* Current Image Status */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="p-3 border rounded-lg">
              <div className="font-medium text-gray-900">Main Image</div>
              <div className={hasMainImage ? 'text-green-600' : 'text-red-600'}>
                {hasMainImage ? '✓ Set' : '✗ Not set'}
              </div>
            </div>
            <div className="p-3 border rounded-lg">
              <div className="font-medium text-gray-900">Sample Images</div>
              <div className="text-gray-600">{sampleImages.length} uploaded (max 4)</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Product Status */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Product Status</CardTitle>
          <CardDescription>Control the visibility and promotion of your product</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between p-4 border rounded-lg">
            <div className="space-y-0.5">
              <Label className="text-base font-medium">Active Product</Label>
              <p className="text-sm text-muted-foreground">
                Make this product available for purchase on your website
              </p>
            </div>
            <Switch
              checked={formData.isActive}
              onCheckedChange={(checked) => onUpdate({ isActive: checked })}
            />
          </div>

          <div className="flex items-center justify-between p-4 border rounded-lg">
            <div className="space-y-0.5">
              <Label className="text-base font-medium">Featured Product</Label>
              <p className="text-sm text-muted-foreground">
                Display prominently on homepage and in category listings
              </p>
            </div>
            <Switch
              checked={formData.isFeatured}
              onCheckedChange={(checked) => onUpdate({ isFeatured: checked })}
            />
          </div>
        </CardContent>
      </Card>

      {/* Validation Summary */}
      {Object.keys(errors).length > 0 && (
        <Alert variant="destructive">
          <Info className="h-4 w-4" />
          <AlertDescription>
            Please fix the following issues before proceeding:
            <ul className="mt-2 space-y-1">
              {Object.values(errors).map((error, index) => (
                <li key={index}>• {error}</li>
              ))}
            </ul>
          </AlertDescription>
        </Alert>
      )}
    </div>
  )
}
