generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AddOn {
  id                       String           @id @default(cuid())
  name                     String           @unique
  description              String?
  tooltipText              String?
  pricingModel             PricingModel
  configuration            Json
  additionalTurnaroundDays Int              @default(0)
  sortOrder                Int              @default(0)
  isActive                 Boolean          @default(true)
  adminNotes               String?
  createdAt                DateTime         @default(now())
  updatedAt DateTime @updatedAt
  addOnSetItems            AddOnSetItem[]
  addOnSubOptions          AddOnSubOption[]
  orderItemAddOns          OrderItemAddOn[]
  productAddOns            ProductAddOn[]
}

model AddOnSet {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String?
  sortOrder        Int               @default(0)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt DateTime @updatedAt
  addOnSetItems    AddOnSetItem[]
  productAddOnSets ProductAddOnSet[]
}

model AddOnSetItem {
  id              String          @id @default(cuid())
  addOnSetId      String
  addOnId         String
  displayPosition DisplayPosition @default(IN_DROPDOWN)
  isDefault       Boolean         @default(false)
  sortOrder       Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt DateTime @updatedAt
  AddOn           AddOn           @relation(fields: [addOnId], references: [id], onDelete: Cascade)
  AddOnSet        AddOnSet        @relation(fields: [addOnSetId], references: [id], onDelete: Cascade)

  @@unique([addOnSetId, addOnId])
  @@index([addOnId])
  @@index([addOnSetId])
}

model AddOnSubOption {
  id             String   @id @default(cuid())
  addOnId        String
  name           String
  optionType     String
  options        Json?
  defaultValue   String?
  isRequired     Boolean  @default(false)
  affectsPricing Boolean  @default(false)
  tooltipText    String?
  displayOrder   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt DateTime @updatedAt
  AddOn          AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
}

model Airport {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  carrier   String
  operator  String?
  address   String
  city      String
  state     String
  zip       String
  hours     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  @@index([code])
  @@index([isActive])
  @@index([state])
}

model CampaignABTest {
  id                String            @id @default(cuid())
  campaignId        String
  name              String
  description       String?
  testType          ABTestType
  variants          Json
  trafficSplit      Json
  winnerCriteria    String
  confidence        Float             @default(95.0)
  isActive          Boolean           @default(true)
  winnerId          String?
  results           Json?
  startedAt         DateTime?
  endedAt           DateTime?
  createdAt         DateTime          @default(now())
  updatedAt DateTime @updatedAt
  MarketingCampaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([isActive])
}

model CampaignAnalytics {
  id                String            @id @default(cuid())
  campaignId        String
  date              DateTime          @default(now())
  sent              Int               @default(0)
  delivered         Int               @default(0)
  opened            Int               @default(0)
  clicked           Int               @default(0)
  bounced           Int               @default(0)
  unsubscribed      Int               @default(0)
  revenue           Float             @default(0)
  orders            Int               @default(0)
  uniqueOpens       Int               @default(0)
  uniqueClicks      Int               @default(0)
  MarketingCampaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([campaignId])
  @@index([date])
}

model CampaignSend {
  id                String            @id @default(cuid())
  campaignId        String
  recipientEmail    String
  recipientName     String?
  userId            String?
  status            SendStatus        @default(PENDING)
  sentAt            DateTime?
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  bouncedAt         DateTime?
  unsubscribedAt    DateTime?
  bounceReason      String?
  errorMessage      String?
  trackingData      Json?
  createdAt         DateTime          @default(now())
  updatedAt DateTime @updatedAt
  MarketingCampaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  User              User?             @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([recipientEmail])
  @@index([sentAt])
  @@index([status])
}

model CoatingOption {
  id                 String              @id @default(cuid())
  name               String              @unique
  createdAt          DateTime            @default(now())
  updatedAt DateTime @updatedAt
  description        String?
  paperStockCoatings PaperStockCoating[]
}

model Currency {
  id                 String   @id @default(cuid())
  code               String   @unique
  name               String
  symbol             String
  exchangeRate       Float    @default(1.0)
  lastUpdated        DateTime @default(now())
  decimalPlaces      Int      @default(2)
  thousandsSeparator String   @default(",")
  decimalSeparator   String   @default(".")
  symbolPosition     String   @default("before")
  countries          String[]
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}

model CustomTheme {
  id                String   @id @default(cuid())
  name              String
  description       String?
  cssVariables      Json
  darkModeVariables Json?
  customCSS         String?
  isActive          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

model CustomerJourney {
  id                 String               @id @default(cuid())
  userId             String               @unique
  stage              CustomerStage        @default(LEAD)
  score              Int                  @default(0)
  lastActivity       DateTime             @default(now())
  totalSpent         Float                @default(0)
  orderCount         Int                  @default(0)
  avgOrderValue      Float                @default(0)
  daysSinceFirst     Int                  @default(0)
  daysSinceLast      Int                  @default(0)
  engagement         Json?
  preferences        Json?
  createdAt          DateTime             @default(now())
  updatedAt DateTime @updatedAt
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  CustomerTouchpoint CustomerTouchpoint[]

  @@index([lastActivity])
  @@index([score])
  @@index([stage])
}

model CustomerSegment {
  id                String              @id @default(cuid())
  name              String
  description       String?
  criteria          Json
  isActive          Boolean             @default(true)
  isDynamic         Boolean             @default(true)
  customerIds       String[]
  count             Int                 @default(0)
  lastUpdated       DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt DateTime @updatedAt
  MarketingCampaign MarketingCampaign[]
  MarketingWorkflow MarketingWorkflow[]
  SMSCampaign       SMSCampaign[]

  @@index([isActive])
  @@index([isDynamic])
}

model CustomerTouchpoint {
  id              String          @id @default(cuid())
  journeyId       String
  type            TouchpointType
  channel         String
  action          String
  details         Json?
  timestamp       DateTime        @default(now())
  CustomerJourney CustomerJourney @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@index([journeyId])
  @@index([timestamp])
  @@index([type])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  subject     String
  content     Json
  previewText String?
  thumbnail   String?
  isPublic    Boolean  @default(false)
  tags        String[]
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model ExchangeRate {
  id           String    @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  source       String    @default("api")
  validFrom    DateTime  @default(now())
  validTo      DateTime?
  createdAt    DateTime  @default(now())

  @@unique([fromCurrency, toCurrency, validFrom])
  @@index([fromCurrency])
  @@index([toCurrency])
  @@index([validFrom])
}

model File {
  id         String   @id @default(cuid())
  orderId    String
  filename   String
  fileUrl    String?
  fileSize   Int?
  mimeType   String?
  uploadedBy String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Locale {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  nativeName     String
  direction      String   @default("ltr")
  dateFormat     String   @default("MM/dd/yyyy")
  timeFormat     String   @default("h:mm a")
  numberFormat   Json
  currencyFormat Json
  flag           String?
  isActive       Boolean  @default(true)
  sortOrder      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}

model MarketingAsset {
  id         String    @id @default(cuid())
  name       String
  type       AssetType
  url        String
  fileSize   Int?
  dimensions Json?
  alt        String?
  tags       String[]
  folder     String?
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt DateTime @updatedAt

  @@index([folder])
  @@index([type])
}

model MarketingCampaign {
  id                String              @id @default(cuid())
  name              String
  type              CampaignType
  status            CampaignStatus      @default(DRAFT)
  subject           String?
  previewText       String?
  content           Json
  senderName        String              @default("GangRun Printing")
  senderEmail       String              @default("noreply@gangrunprinting.com")
  replyToEmail      String?
  segmentId         String?
  scheduledAt       DateTime?
  sentAt            DateTime?
  completedAt       DateTime?
  isTemplate        Boolean             @default(false)
  templateName      String?
  tags              String[]
  settings          Json?
  trackingPixelUrl  String?
  utmCampaign       String?
  utmSource         String              @default("email")
  utmMedium         String              @default("email")
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt DateTime @updatedAt
  CampaignABTest    CampaignABTest[]
  CampaignAnalytics CampaignAnalytics[]
  CampaignSend      CampaignSend[]
  CustomerSegment   CustomerSegment?    @relation(fields: [segmentId], references: [id])

  @@index([createdAt])
  @@index([scheduledAt])
  @@index([status])
  @@index([type])
}

model MarketingWorkflow {
  id                String              @id @default(cuid())
  name              String
  description       String?
  trigger           Json
  steps             Json
  isActive          Boolean             @default(false)
  segmentId         String?
  settings          Json?
  createdAt         DateTime            @default(now())
  updatedAt DateTime @updatedAt
  CustomerSegment   CustomerSegment?    @relation(fields: [segmentId], references: [id])
  WorkflowExecution WorkflowExecution[]

  @@index([isActive])
}

model N8NWebhook {
  id            String          @id @default(cuid())
  name          String
  url           String          @unique
  trigger       String
  isActive      Boolean         @default(true)
  description   String?
  payload       Json?
  lastTriggered DateTime?
  triggerCount  Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt DateTime @updatedAt
  N8NWebhookLog N8NWebhookLog[]

  @@index([isActive])
  @@index([trigger])
}

model N8NWebhookLog {
  id         String     @id @default(cuid())
  webhookId  String
  payload    Json
  response   Json?
  status     Int        @default(200)
  executedAt DateTime   @default(now())
  N8NWebhook N8NWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([executedAt])
  @@index([webhookId])
}

model Notification {
  id        String           @id @default(cuid())
  orderId   String
  type      NotificationType
  sent      Boolean          @default(false)
  sentAt    DateTime?
  error     String?
  createdAt DateTime         @default(now())
  Order     Order            @relation(fields: [orderId], references: [id])
}

model OptionValue {
  id             String        @id @default(cuid())
  optionId       String
  value          String
  displayName    String?
  additionalCost Float         @default(0)
  isDefault      Boolean       @default(false)
  sortOrder      Int           @default(0)
  width          Float?
  height         Float?
  createdAt      DateTime      @default(now())
  updatedAt DateTime @updatedAt
  ProductOption  ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([optionId])
}

model Order {
  id                  String          @id @default(cuid())
  orderNumber         String          @unique
  referenceNumber     String?         @unique
  userId              String?
  vendorId            String?
  subtotal            Float
  tax                 Float
  shipping            Float
  total               Float
  shippingMethod      String?
  trackingNumber      String?
  createdAt           DateTime        @default(now())
  updatedAt DateTime @updatedAt
  adminNotes          String?
  carrier             Carrier?
  deleteAt            DateTime        @default(dbgenerated("(now() + '1 year'::interval)"))
  email               String
  paidAt              DateTime?
  phone               String?
  refundAmount        Float?
  refundedAt          DateTime?
  squareCustomerId    String?
  squareOrderId       String?
  squarePaymentId     String?
  status              OrderStatus     @default(PENDING_PAYMENT)
  shippingAddress     Json
  billingAddress      Json?
  packageDimensions   Json?
  selectedAirportId   String?
  shippingLabelUrl    String?
  shippingServiceCode String?
  totalWeight         Float?
  File                File[]
  Notification        Notification[]
  Airport             Airport?        @relation(fields: [selectedAirportId], references: [id])
  User                User?           @relation(fields: [userId], references: [id])
  Vendor              Vendor?         @relation(fields: [vendorId], references: [id])
  OrderItem           OrderItem[]
  ShippingRate        ShippingRate[]
  StatusHistory       StatusHistory[]
}

model OrderItem {
  id               String           @id @default(cuid())
  orderId          String
  quantity         Int
  createdAt        DateTime         @default(now())
  options          Json?
  price            Float
  productName      String
  productSku       String
  calculatedWeight Float?
  dimensions       Json?
  paperStockId     String?
  Order            Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  PaperStock       PaperStock?      @relation(fields: [paperStockId], references: [id])
  OrderItemAddOn   OrderItemAddOn[]
}

model OrderItemAddOn {
  id              String    @id @default(cuid())
  orderItemId     String
  addOnId         String
  configuration   Json
  calculatedPrice Float
  createdAt       DateTime  @default(now())
  AddOn           AddOn     @relation(fields: [addOnId], references: [id])
  OrderItem       OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, addOnId])
}

model PaperException {
  id                    String     @id @default(cuid())
  paperStockId          String     @unique
  exceptionType         String
  doubleSidedMultiplier Float      @default(1.75)
  description           String?
  createdAt             DateTime   @default(now())
  updatedAt DateTime @updatedAt
  PaperStock            PaperStock @relation(fields: [paperStockId], references: [id], onDelete: Cascade)

  @@index([exceptionType])
}

model PaperStock {
  id                 String              @id @default(cuid())
  name               String              @unique
  pricePerSqInch     Float               @default(0.001)
  tooltipText        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt DateTime @updatedAt
  weight             Float               @default(0.0015)
  OrderItem          OrderItem[]
  PaperException     PaperException?
  paperStockCoatings PaperStockCoating[]
  paperStockSetItems PaperStockSetItem[]
  paperStockSides    PaperStockSides[]
  ProductPaperStock  ProductPaperStock[]
  VendorPaperStock   VendorPaperStock[]
}

model PaperStockCoating {
  paperStockId  String
  coatingId     String
  isDefault     Boolean       @default(false)
  CoatingOption CoatingOption @relation(fields: [coatingId], references: [id], onDelete: Cascade)
  PaperStock    PaperStock    @relation(fields: [paperStockId], references: [id], onDelete: Cascade)

  @@id([paperStockId, coatingId])
  @@index([coatingId])
  @@index([paperStockId])
}

model PaperStockSet {
  id                   String                 @id @default(cuid())
  name                 String                 @unique
  description          String?
  sortOrder            Int                    @default(0)
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt DateTime @updatedAt
  PaperStockSetItem    PaperStockSetItem[]
  ProductPaperStockSet ProductPaperStockSet[]
}

model PaperStockSetItem {
  id              String        @id @default(cuid())
  paperStockSetId String
  paperStockId    String
  isDefault       Boolean       @default(false)
  sortOrder       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt DateTime @updatedAt
  PaperStock      PaperStock    @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  PaperStockSet   PaperStockSet @relation(fields: [paperStockSetId], references: [id], onDelete: Cascade)

  @@unique([paperStockSetId, paperStockId])
  @@index([paperStockId])
  @@index([paperStockSetId])
}

model PaperStockSides {
  paperStockId    String
  sidesOptionId   String
  priceMultiplier Float       @default(1.0)
  isEnabled       Boolean     @default(true)
  PaperStock      PaperStock  @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  SidesOption     SidesOption @relation(fields: [sidesOptionId], references: [id], onDelete: Cascade)

  @@id([paperStockId, sidesOptionId])
  @@index([paperStockId])
  @@index([sidesOptionId])
}

model PricingTier {
  id          String   @id @default(cuid())
  productId   String
  minQuantity Int
  maxQuantity Int?
  unitPrice   Float
  setupFee    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, minQuantity])
  @@index([productId])
}

model Product {
  id                        String                     @id @default(cuid())
  name                      String
  slug                      String                     @unique
  description               String?
  categoryId                String
  basePrice                 Float
  isActive                  Boolean                    @default(true)
  isFeatured                Boolean                    @default(false)
  metadata                  Json?
  productionTime            Int
  createdAt                 DateTime                   @default(now())
  updatedAt DateTime @updatedAt
  gangRunEligible           Boolean                    @default(false)
  maxGangQuantity           Int?
  minGangQuantity           Int?
  rushAvailable             Boolean                    @default(false)
  rushDays                  Int?
  rushFee                   Float?
  setupFee                  Float                      @default(0)
  shortDescription          String?
  sku                       String                     @unique
  pricingTiers              PricingTier[]
  productCategory           ProductCategory            @relation(fields: [categoryId], references: [id])
  productAddOns             ProductAddOn[]
  productAddOnSets          ProductAddOnSet[]
  productImages             ProductImage[]
  productOptions            ProductOption[]
  productPaperStocks        ProductPaperStock[]
  productPaperStockSets     ProductPaperStockSet[]
  productPricingConfig      ProductPricingConfig?
  productQuantities         ProductQuantity[]
  productQuantityGroups     ProductQuantityGroup[]
  productSizes              ProductSize[]
  productSizeGroups         ProductSizeGroup[]
  productTurnaroundTimeSets ProductTurnaroundTimeSet[]
  vendorProducts            VendorProduct[]

  @@index([categoryId])
  @@index([slug])
}

model ProductAddOn {
  id            String   @id @default(cuid())
  productId     String
  addOnId       String
  priceOverride Float?
  isMandatory   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt DateTime @updatedAt
  AddOn         AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
  Product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, addOnId])
}

model ProductAddOnSet {
  id         String   @id @default(cuid())
  productId  String
  addOnSetId String
  isDefault  Boolean  @default(false)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  AddOnSet   AddOnSet @relation(fields: [addOnSetId], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, addOnSetId])
  @@index([addOnSetId])
  @@index([productId])
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt DateTime @updatedAt
  products    Product[]
}

model ProductImage {
  id           String   @id @default(cuid())
  productId    String
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  sortOrder    Int      @default(0)
  isPrimary    Boolean  @default(false)
  width        Int?
  height       Int?
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductOption {
  id          String        @id @default(cuid())
  productId   String
  name        String
  type        OptionType
  required    Boolean       @default(false)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt DateTime @updatedAt
  OptionValue OptionValue[]
  Product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductPaperStock {
  productId      String
  paperStockId   String
  isDefault      Boolean    @default(false)
  additionalCost Float      @default(0)
  id             String     @id @default(cuid())
  PaperStock     PaperStock @relation(fields: [paperStockId], references: [id])
  Product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, paperStockId])
  @@index([paperStockId])
  @@index([productId])
}

model ProductPaperStockSet {
  id              String        @id @default(cuid())
  productId       String
  paperStockSetId String
  isDefault       Boolean       @default(false)
  sortOrder       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt DateTime @updatedAt
  PaperStockSet   PaperStockSet @relation(fields: [paperStockSetId], references: [id], onDelete: Cascade)
  Product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, paperStockSetId])
  @@index([paperStockSetId])
  @@index([productId])
}

model ProductPricingConfig {
  id                  String   @id @default(cuid())
  productId           String   @unique
  allowCustomSize     Boolean  @default(false)
  allowCustomQuantity Boolean  @default(false)
  minCustomWidth      Float?
  maxCustomWidth      Float?
  minCustomHeight     Float?
  maxCustomHeight     Float?
  minCustomQuantity   Int?
  maxCustomQuantity   Int?
  createdAt           DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductQuantity {
  id                 String           @id @default(cuid())
  productId          String
  standardQuantityId String
  isDefault          Boolean          @default(false)
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt DateTime @updatedAt
  Product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  StandardQuantity   StandardQuantity @relation(fields: [standardQuantityId], references: [id], onDelete: Cascade)

  @@unique([productId, standardQuantityId])
  @@index([productId])
  @@index([standardQuantityId])
}

model ProductQuantityGroup {
  id              String        @id @default(cuid())
  productId       String
  quantityGroupId String
  createdAt       DateTime      @default(now())
  updatedAt DateTime @updatedAt
  Product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  QuantityGroup   QuantityGroup @relation(fields: [quantityGroupId], references: [id], onDelete: Cascade)

  @@unique([productId, quantityGroupId])
  @@index([productId])
  @@index([quantityGroupId])
}

model ProductSize {
  id             String       @id @default(cuid())
  productId      String
  standardSizeId String
  isDefault      Boolean      @default(false)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt DateTime @updatedAt
  Product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  StandardSize   StandardSize @relation(fields: [standardSizeId], references: [id], onDelete: Cascade)

  @@unique([productId, standardSizeId])
  @@index([productId])
  @@index([standardSizeId])
}

model ProductSizeGroup {
  id          String    @id @default(cuid())
  productId   String
  sizeGroupId String
  createdAt   DateTime  @default(now())
  updatedAt DateTime @updatedAt
  Product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  SizeGroup   SizeGroup @relation(fields: [sizeGroupId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeGroupId])
  @@index([productId])
  @@index([sizeGroupId])
}

model ProductTurnaroundTimeSet {
  id                  String            @id @default(cuid())
  productId           String
  turnaroundTimeSetId String
  isDefault           Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt DateTime @updatedAt
  Product             Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  TurnaroundTimeSet   TurnaroundTimeSet @relation(fields: [turnaroundTimeSetId], references: [id], onDelete: Cascade)

  @@unique([productId, turnaroundTimeSetId])
  @@index([productId])
  @@index([turnaroundTimeSetId])
}

model PushNotification {
  id     String    @id @default(cuid())
  userId String
  type   String
  title  String
  body   String
  data   Json?
  read   Boolean   @default(false)
  sentAt DateTime  @default(now())
  readAt DateTime?
  User   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sentAt])
  @@index([userId, read])
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String?
  endpoint     String   @unique
  subscription Json
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt DateTime @updatedAt
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([userId])
}

model QuantityGroup {
  id           String                 @id @default(cuid())
  name         String                 @unique
  description  String?
  values       String
  defaultValue String
  customMin    Int?
  customMax    Int?
  sortOrder    Int                    @default(0)
  isActive     Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt DateTime @updatedAt
  products     ProductQuantityGroup[]
}

model Quote {
  id                 String      @id @default(cuid())
  quoteNumber        String      @unique
  userId             String?
  customerEmail      String
  customerName       String?
  customerPhone      String?
  productDetails     Json
  pricing            Json
  validUntil         DateTime
  status             QuoteStatus @default(DRAFT)
  notes              String?
  createdBy          String?
  convertedToOrderId String?
  createdAt          DateTime    @default(now())
  updatedAt DateTime @updatedAt
  User               User?       @relation(fields: [userId], references: [id])
}

model SMSCampaign {
  id              String           @id @default(cuid())
  name            String
  message         String
  segmentId       String?
  status          CampaignStatus   @default(DRAFT)
  scheduledAt     DateTime?
  sentAt          DateTime?
  createdBy       String
  createdAt       DateTime         @default(now())
  updatedAt DateTime @updatedAt
  CustomerSegment CustomerSegment? @relation(fields: [segmentId], references: [id])
  SMSSend         SMSSend[]

  @@index([scheduledAt])
  @@index([status])
}

model SMSSend {
  id           String      @id @default(cuid())
  campaignId   String
  phoneNumber  String
  userId       String?
  status       SendStatus  @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  errorMessage String?
  createdAt    DateTime    @default(now())
  updatedAt DateTime @updatedAt
  SMSCampaign  SMSCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  User         User?       @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([phoneNumber])
  @@index([status])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingRate {
  id            String   @id @default(cuid())
  orderId       String
  carrier       Carrier
  serviceName   String
  serviceCode   String
  estimatedDays Int
  rateAmount    Float
  isSelected    Boolean  @default(false)
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  Order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([orderId])
}

model SidesOption {
  id              String            @id @default(cuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt DateTime @updatedAt
  code            String            @unique
  description     String?
  paperStockSides PaperStockSides[]
}

model SizeGroup {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  values           String
  defaultValue     String
  customMinWidth   Float?
  customMaxWidth   Float?
  customMinHeight  Float?
  customMaxHeight  Float?
  sortOrder        Int                @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt DateTime @updatedAt
  ProductSizeGroup ProductSizeGroup[]
}

model StandardQuantity {
  id               String            @id @default(cuid())
  displayValue     Int               @unique
  calculationValue Int
  adjustmentValue  Int?
  sortOrder        Int               @default(0)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt DateTime @updatedAt
  ProductQuantity  ProductQuantity[]

  @@index([isActive])
  @@index([sortOrder])
}

model StandardSize {
  id                 String        @id @default(cuid())
  name               String        @unique
  displayName        String
  width              Float
  height             Float
  preCalculatedValue Float
  sortOrder          Int           @default(0)
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt DateTime @updatedAt
  ProductSize        ProductSize[]

  @@index([isActive])
  @@index([sortOrder])
}

model StatusHistory {
  id         String       @id @default(cuid())
  orderId    String
  fromStatus OrderStatus?
  toStatus   OrderStatus
  notes      String?
  changedBy  String?
  createdAt  DateTime     @default(now())
  Order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Tenant {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  domain             String?              @unique
  subdomain          String               @unique
  isActive           Boolean              @default(true)
  plan               TenantPlan           @default(BASIC)
  settings           Json?
  branding           Json?
  locales            String[]             @default(["en"])
  defaultLocale      String               @default("en")
  timezone           String               @default("America/Chicago")
  currency           String               @default("USD")
  contactEmail       String
  contactName        String?
  contactPhone       String?
  billingEmail       String?
  features           Json?
  trialEndsAt        DateTime?
  suspendedAt        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt DateTime @updatedAt
  TenantBrand        TenantBrand[]
  TenantDomain       TenantDomain[]
  TenantUser         TenantUser[]
  Translation        Translation[]
  TranslationRequest TranslationRequest[]

  @@index([domain])
  @@index([isActive])
  @@index([slug])
  @@index([subdomain])
}

model TenantBrand {
  id              String   @id @default(cuid())
  tenantId        String
  name            String
  isDefault       Boolean  @default(false)
  logoUrl         String?
  logoText        String?
  faviconUrl      String?
  primaryColor    String   @default("#3b82f6")
  secondaryColor  String   @default("#64748b")
  accentColor     String   @default("#f59e0b")
  backgroundColor String   @default("#ffffff")
  textColor       String   @default("#1f2937")
  primaryFont     String   @default("Inter")
  secondaryFont   String   @default("Inter")
  fontSize        String   @default("16px")
  borderRadius    String   @default("8px")
  spacing         String   @default("16px")
  customCss       String?
  customJs        String?
  emailHeaderLogo String?
  emailFooterText String?
  emailColors     Json?
  createdAt       DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([isDefault])
  @@index([tenantId])
}

model TenantDomain {
  id                 String    @id @default(cuid())
  tenantId           String
  domain             String    @unique
  isVerified         Boolean   @default(false)
  isPrimary          Boolean   @default(false)
  sslEnabled         Boolean   @default(false)
  verificationToken  String?
  verificationMethod String?
  verificationStatus String?
  sslCertificateId   String?
  sslExpiresAt       DateTime?
  createdAt          DateTime  @default(now())
  updatedAt DateTime @updatedAt
  Tenant             Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([domain])
  @@index([isVerified])
  @@index([tenantId])
}

model TenantUser {
  id       String         @id @default(cuid())
  tenantId String
  userId   String
  role     TenantUserRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  Tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
}

model ThemeTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   @default("business")
  thumbnail   String?
  previewUrl  String?
  colors      Json
  typography  Json
  layout      Json
  components  Json
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  tags        String[] @default([])
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([isPremium])
}

model Translation {
  id               String            @id @default(cuid())
  tenantId         String?
  key              String
  namespace        String            @default("common")
  locale           String
  value            String
  context          String?
  pluralization    Json?
  interpolation    String[]          @default([])
  isApproved       Boolean           @default(false)
  confidence       Float?
  source           TranslationSource @default(MANUAL)
  translatedBy     String?
  autoTranslated   Boolean           @default(false)
  originalText     String?
  translationModel String?
  createdAt        DateTime          @default(now())
  updatedAt DateTime @updatedAt
  Tenant           Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key, namespace, locale])
  @@index([isApproved])
  @@index([key])
  @@index([locale])
  @@index([namespace])
  @@index([source])
  @@index([tenantId])
}

model TranslationRequest {
  id             String              @id @default(cuid())
  tenantId       String?
  key            String
  namespace      String              @default("common")
  sourceLocale   String              @default("en")
  targetLocale   String
  sourceText     String
  translatedText String?
  status         TranslationStatus   @default(PENDING)
  priority       TranslationPriority @default(NORMAL)
  context        String?
  notes          String?
  assignedTo     String?
  assignedAt     DateTime?
  completedAt    DateTime?
  autoAttempted  Boolean             @default(false)
  autoResult     String?
  autoConfidence Float?
  requestedBy    String
  createdAt      DateTime            @default(now())
  updatedAt DateTime @updatedAt
  Tenant         Tenant?             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([assignedTo])
  @@index([status])
  @@index([targetLocale])
  @@index([tenantId])
}

model TurnaroundTime {
  id                    String                  @id @default(cuid())
  name                  String
  displayName           String
  description           String?
  daysMin               Int
  daysMax               Int?
  pricingModel          PricingModel            @default(FLAT)
  basePrice             Float                   @default(0)
  priceMultiplier       Float                   @default(1.0)
  isActive              Boolean                 @default(true)
  sortOrder             Int                     @default(0)
  requiresNoCoating     Boolean                 @default(false)
  restrictedCoatings    String[]                @default([])
  restrictedOptions     Json?
  createdAt             DateTime                @default(now())
  updatedAt DateTime @updatedAt
  TurnaroundTimeSetItem TurnaroundTimeSetItem[]

  @@index([isActive])
  @@index([sortOrder])
}

model TurnaroundTimeSet {
  id                       String                     @id @default(cuid())
  name                     String                     @unique
  description              String?
  isActive                 Boolean                    @default(true)
  sortOrder                Int                        @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt DateTime @updatedAt
  ProductTurnaroundTimeSet ProductTurnaroundTimeSet[]
  TurnaroundTimeSetItem    TurnaroundTimeSetItem[]

  @@index([isActive])
  @@index([sortOrder])
}

model TurnaroundTimeSetItem {
  id                  String            @id @default(cuid())
  turnaroundTimeSetId String
  turnaroundTimeId    String
  isDefault           Boolean           @default(false)
  sortOrder           Int               @default(0)
  priceOverride       Float?
  createdAt           DateTime          @default(now())
  updatedAt DateTime @updatedAt
  TurnaroundTime      TurnaroundTime    @relation(fields: [turnaroundTimeId], references: [id], onDelete: Cascade)
  TurnaroundTimeSet   TurnaroundTimeSet @relation(fields: [turnaroundTimeSetId], references: [id], onDelete: Cascade)

  @@unique([turnaroundTimeSetId, turnaroundTimeId])
  @@index([turnaroundTimeId])
  @@index([turnaroundTimeSetId])
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      Boolean             @default(false)
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt DateTime @updatedAt
  name               String?
  role               UserRole            @default(CUSTOMER)
  isBroker           Boolean             @default(false)
  brokerDiscounts    Json?
  marketingOptIn     Boolean             @default(true)
  phoneNumber        String?
  smsOptIn           Boolean             @default(false)
  accounts           Account[]
  campaignSends      CampaignSend[]
  customerJourney    CustomerJourney?
  orders             Order[]
  pushNotifications  PushNotification[]
  pushSubscriptions  PushSubscription[]
  quotes             Quote[]
  smsSends           SMSSend[]
  session            Session[]
  tenantUsers        TenantUser[]
  workflowExecutions WorkflowExecution[]
}

model Vendor {
  id                  String             @id @default(cuid())
  name                String             @unique
  contactEmail        String
  orderEmail          String?
  phone               String?
  website             String?
  address             Json?
  supportedCarriers   String[]
  isActive            Boolean            @default(true)
  notes               String?
  turnaroundDays      Int                @default(3)
  minimumOrderAmount  Float?
  shippingCostFormula String?
  n8nWebhookUrl       String?
  apiCredentials      Json?
  createdAt           DateTime           @default(now())
  updatedAt DateTime @updatedAt
  Order               Order[]
  VendorPaperStock    VendorPaperStock[]
  VendorProduct       VendorProduct[]
}

model VendorPaperStock {
  id           String     @id @default(cuid())
  vendorId     String
  paperStockId String
  vendorSku    String?
  vendorPrice  Float?
  leadTime     Int?
  minQuantity  Int?
  createdAt    DateTime   @default(now())
  updatedAt DateTime @updatedAt
  PaperStock   PaperStock @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  Vendor       Vendor     @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, paperStockId])
}

model VendorProduct {
  id          String   @id @default(cuid())
  vendorId    String
  productId   String
  vendorSku   String?
  vendorPrice Float?
  isPreferred Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  Vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, productId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkflowExecution {
  id                String            @id @default(cuid())
  workflowId        String
  userId            String?
  triggerData       Json
  currentStep       Int               @default(0)
  status            ExecutionStatus   @default(RUNNING)
  completedAt       DateTime?
  errorMessage      String?
  stepResults       Json?
  createdAt         DateTime          @default(now())
  updatedAt DateTime @updatedAt
  User              User?             @relation(fields: [userId], references: [id])
  MarketingWorkflow MarketingWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
  @@index([workflowId])
}

enum ABTestType {
  SUBJECT_LINE
  CONTENT
  SEND_TIME
  SENDER_NAME
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  TEMPLATE
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum CampaignType {
  EMAIL
  SMS
  PUSH
}

enum Carrier {
  FEDEX
  UPS
  SOUTHWEST_CARGO
}

enum CustomerStage {
  LEAD
  PROSPECT
  FIRST_TIME
  REPEAT
  VIP
  CHURNED
  REACTIVATED
}

enum DisplayPosition {
  ABOVE_DROPDOWN
  IN_DROPDOWN
  BELOW_DROPDOWN
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  ORDER_CONFIRMED
  PAYMENT_RECEIVED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_REFUNDED
}

enum OptionType {
  SELECT
  RADIO
  CHECKBOX
  TEXT
  NUMBER
  FILE
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  CONFIRMATION
  PRE_PRESS
  ON_HOLD
  PROCESSING
  PRODUCTION
  PRINTING
  QUALITY_CHECK
  BINDERY
  PACKAGING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PAYMENT_FAILED
}

enum PricingModel {
  FLAT
  PERCENTAGE
  PER_UNIT
  CUSTOM
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

enum SendStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

enum TenantPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum TenantUserRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum TouchpointType {
  EMAIL_OPEN
  EMAIL_CLICK
  WEBSITE_VISIT
  ORDER_PLACED
  SUPPORT_CONTACT
  SMS_RECEIVED
  PUSH_RECEIVED
  LOGIN
  LOGOUT
}

enum TranslationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TranslationSource {
  MANUAL
  AUTO_OPENAI
  AUTO_GOOGLE
  IMPORT
  API
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  NEEDS_REVIEW
}

enum UserRole {
  CUSTOMER
  ADMIN
}
