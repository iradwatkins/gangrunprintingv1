generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  password      String?   // For credentials authentication
  role          UserRole  @default(CUSTOMER)
  isBroker      Boolean   @default(false) // Broker status
  brokerDiscounts Json?   // Category-specific discount percentages
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
  quotes        Quote[]
  pushSubscriptions PushSubscription[]
  pushNotifications PushNotification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PaperStock {
  id                      String              @id @default(cuid())
  name                    String              @unique
  category                String
  coating                 String              @default("None")
  weight                  String
  opacity                 Int?
  brightness              Int?
  priceMultiplier         Float               @default(1.0)
  pricePerSqInch          Float               @default(0.001) // Base price per square inch
  secondSideMarkupPercent Float               @default(50.0)  // Markup percentage for double-sided printing
  tooltipText             String?             // User guidance text
  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  costPerSheet            Float
  finish                  String
  isEcoFriendly           Boolean             @default(false)
  reorderPoint            Int                 @default(1000)
  reorderQuantity         Int                 @default(5000)
  sheetsInStock           Int                 @default(0)
  sides                   String              @default("Double")
  thickness               Float?
  productPaperStocks      ProductPaperStock[]
  paperStockCoatings      PaperStockCoating[]
  paperStockSides         PaperStockSides[]
  vendorPaperStocks       VendorPaperStock[]
}

model CoatingOption {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String?
  additionalCost     Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  paperStockCoatings PaperStockCoating[]
}

model PaperStockCoating {
  paperStockId    String
  coatingId       String
  isDefault       Boolean     @default(false)
  priceAdjustment Float?
  paperStock      PaperStock     @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  coating         CoatingOption  @relation(fields: [coatingId], references: [id], onDelete: Cascade)
  
  @@id([paperStockId, coatingId])
  @@index([paperStockId])
  @@index([coatingId])
}

model SidesOption {
  id              String           @id @default(cuid())
  name            String           @unique
  code            String           @unique
  description     String?
  isDefault       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  paperStockSides PaperStockSides[]
}

model PaperStockSides {
  paperStockId    String
  sidesOptionId   String
  priceMultiplier Float       @default(1.0)
  isEnabled       Boolean     @default(true)
  paperStock      PaperStock  @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  sidesOption     SidesOption @relation(fields: [sidesOptionId], references: [id], onDelete: Cascade)
  
  @@id([paperStockId, sidesOptionId])
  @@index([paperStockId])
  @@index([sidesOptionId])
}

model Product {
  id                 String              @id @default(cuid())
  name               String
  slug               String              @unique
  description        String?
  categoryId         String
  basePrice          Float
  isActive           Boolean             @default(true)
  isFeatured         Boolean             @default(false)
  metadata           Json?
  productionTime     Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  gangRunEligible    Boolean             @default(false)
  maxGangQuantity    Int?
  minGangQuantity    Int?
  rushAvailable      Boolean             @default(false)
  rushDays           Int?
  rushFee            Float?
  setupFee           Float               @default(0)
  shortDescription   String?
  sku                String              @unique
  PricingTier        PricingTier[]
  ProductCategory    ProductCategory     @relation(fields: [categoryId], references: [id])
  ProductImage       ProductImage[]
  ProductOption      ProductOption[]
  productPaperStocks ProductPaperStock[]
  productAddOns      ProductAddOn[]
  productQuantityGroups ProductQuantityGroup[]
  productSizeGroups  ProductSizeGroup[]
  vendorProducts     VendorProduct[]

  @@index([categoryId])
  @@index([slug])
}

model ProductPaperStock {
  productId      String
  paperStockId   String
  isDefault      Boolean    @default(false)
  additionalCost Float      @default(0)
  id             String     @id @default(cuid())
  paperStock     PaperStock @relation(fields: [paperStockId], references: [id])
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, paperStockId])
  @@index([productId])
  @@index([paperStockId])
}

model Order {
  id               String          @id @default(cuid())
  orderNumber      String          @unique @default(cuid())
  referenceNumber  String?         @unique // GRP-XXXXX format
  userId           String?
  vendorId         String?         // Assigned vendor for fulfillment
  subtotal         Float
  tax              Float
  shipping         Float
  total            Float
  shippingMethod   String?
  trackingNumber   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  adminNotes       String?
  carrier          Carrier?
  deleteAt         DateTime        @default(dbgenerated("(now() + '1 year'::interval)"))
  email            String
  paidAt           DateTime?
  phone            String?
  refundAmount     Float?
  refundedAt       DateTime?
  squareCustomerId String?
  squareOrderId    String?
  squarePaymentId  String?
  status           OrderStatus     @default(PENDING_PAYMENT)
  shippingAddress  Json
  billingAddress   Json?           // Separate billing address
  File             File[]
  Notification     Notification[]
  user             User?           @relation(fields: [userId], references: [id])
  vendor           Vendor?         @relation(fields: [vendorId], references: [id])
  OrderItem        OrderItem[]
  StatusHistory    StatusHistory[]
}

model File {
  id         String   @id
  orderId    String
  filename   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id
  orderId   String
  type      NotificationType
  sent      Boolean          @default(false)
  sentAt    DateTime?
  error     String?
  createdAt DateTime         @default(now())
  Order     Order            @relation(fields: [orderId], references: [id])
}

model OptionValue {
  id             String        @id
  optionId       String
  value          String
  displayName    String?
  additionalCost Float         @default(0)
  isDefault      Boolean       @default(false)
  sortOrder      Int           @default(0)
  width          Float?
  height         Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  ProductOption  ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([optionId])
}

model OrderItem {
  id              String           @id
  orderId         String
  quantity        Int
  createdAt       DateTime         @default(now())
  options         Json?
  price           Float
  productName     String
  productSku      String
  Order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItemAddOns OrderItemAddOn[]
}

model PricingTier {
  id          String   @id
  productId   String
  minQuantity Int
  maxQuantity Int?
  unitPrice   Float
  setupFee    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, minQuantity])
  @@index([productId])
}

model ProductCategory {
  id          String    @id
  name        String    @unique
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Product     Product[]
}

model ProductImage {
  id           String   @id
  productId    String
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  sortOrder    Int      @default(0)
  isPrimary    Boolean  @default(false)
  width        Int?
  height       Int?
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductOption {
  id          String        @id
  productId   String
  name        String
  type        OptionType
  required    Boolean       @default(false)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  OptionValue OptionValue[]
  Product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model StatusHistory {
  id         String       @id
  orderId    String
  fromStatus OrderStatus?
  toStatus   OrderStatus
  notes      String?
  changedBy  String?
  createdAt  DateTime     @default(now())
  Order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  CONFIRMATION      // Order confirmed
  PRE_PRESS        // Pre-press preparation
  ON_HOLD          // On hold for any reason
  PROCESSING       // General processing
  PRODUCTION       // In production/printing
  PRINTING         // Actively printing
  QUALITY_CHECK    // Quality control
  BINDERY          // Bindery/finishing work
  PACKAGING        // Packaging
  READY_FOR_PICKUP // Ready for pickup
  SHIPPED          // Shipped
  DELIVERED        // Delivered
  CANCELLED        // Cancelled
  REFUNDED         // Refunded
  PAYMENT_FAILED   // Payment failed
}

enum Carrier {
  FEDEX
  UPS
  SOUTHWEST_CARGO
}

enum NotificationType {
  ORDER_CONFIRMED
  PAYMENT_RECEIVED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_REFUNDED
}

enum OptionType {
  SELECT
  RADIO
  CHECKBOX
  TEXT
  NUMBER
  FILE
}

enum PricingModel {
  FLAT
  PERCENTAGE
  PER_UNIT
  CUSTOM
}

model AddOn {
  id                       String            @id @default(cuid())
  name                     String            @unique
  description              String?
  tooltipText              String?
  pricingModel             PricingModel
  configuration            Json              // Flexible JSON for pricing rules
  additionalTurnaroundDays Int               @default(0)
  sortOrder                Int               @default(0)
  isActive                 Boolean           @default(true)
  adminNotes               String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  subOptions               AddOnSubOption[]
  productAddOns            ProductAddOn[]
  orderItemAddOns          OrderItemAddOn[]
}

model AddOnSubOption {
  id             String   @id @default(cuid())
  addOnId        String
  name           String
  optionType     String   // dropdown, text_input, number_input
  options        Json?    // For dropdown options
  defaultValue   String?
  isRequired     Boolean  @default(false)
  affectsPricing Boolean  @default(false)
  tooltipText    String?
  displayOrder   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  addOn          AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
}

model ProductAddOn {
  id            String   @id @default(cuid())
  productId     String
  addOnId       String
  priceOverride Float?   // Product-specific price override
  isMandatory   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  addOn         AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)

  @@unique([productId, addOnId])
}

model OrderItemAddOn {
  id               String    @id @default(cuid())
  orderItemId      String
  addOnId          String
  configuration    Json      // Snapshot of selected options
  calculatedPrice  Float
  createdAt        DateTime  @default(now())
  orderItem        OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  addOn            AddOn     @relation(fields: [addOnId], references: [id], onDelete: Restrict)

  @@unique([orderItemId, addOnId])
}

model QuantityGroup {
  id               String                  @id @default(cuid())
  name             String                  @unique // e.g., "Business Card Quantities", "Poster Quantities"
  description      String?
  values           String                  // Comma-separated values like "25,50,100,250,500,custom"
  defaultValue     String                  // Default value from the values list
  customMin        Int?                    // Optional minimum for custom input
  customMax        Int?                    // Optional maximum for custom input
  sortOrder        Int                     @default(0)
  isActive         Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  products         ProductQuantityGroup[]
}

model ProductQuantityGroup {
  id              String        @id @default(cuid())
  productId       String
  quantityGroupId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantityGroup   QuantityGroup @relation(fields: [quantityGroupId], references: [id], onDelete: Cascade)
  
  @@unique([productId, quantityGroupId])
  @@index([productId])
  @@index([quantityGroupId])
}

model SizeGroup {
  id               String              @id @default(cuid())
  name             String              @unique // e.g., "Business Card Sizes", "Poster Sizes"
  description      String?
  values           String              // Comma-separated values like "2x3.5,4x6,5x7,8.5x11,custom"
  defaultValue     String              // Default value from the values list
  customMinWidth   Float?              // Optional minimum width for custom input
  customMaxWidth   Float?              // Optional maximum width for custom input
  customMinHeight  Float?              // Optional minimum height for custom input
  customMaxHeight  Float?              // Optional maximum height for custom input
  sortOrder        Int                 @default(0)
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  products         ProductSizeGroup[]
}

// Removed Size, SizeGroupItem, and ProductSize models - no longer needed with simplified structure

model ProductSizeGroup {
  id          String    @id @default(cuid())
  productId   String
  sizeGroupId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeGroup   SizeGroup @relation(fields: [sizeGroupId], references: [id], onDelete: Cascade)
  
  @@unique([productId, sizeGroupId])
  @@index([productId])
  @@index([sizeGroupId])
}

model Vendor {
  id                   String   @id @default(cuid())
  name                 String   @unique
  contactEmail         String
  orderEmail           String?  // Email for n8n.io webhook integration
  phone                String?
  website              String?
  address              Json?    // Street, city, state, zip, country
  supportedCarriers    String[] // Array of carriers like ['FEDEX', 'UPS', 'SOUTHWEST_CARGO']
  isActive             Boolean  @default(true)
  notes                String?
  turnaroundDays       Int      @default(3)
  minimumOrderAmount   Float?
  shippingCostFormula  String?  // Formula or notes for calculating shipping
  n8nWebhookUrl        String?  // Direct webhook URL for n8n integration
  apiCredentials       Json?    // Encrypted API credentials if needed
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orders               Order[]
  vendorPaperStocks    VendorPaperStock[]
  vendorProducts       VendorProduct[]
}

model VendorPaperStock {
  id           String     @id @default(cuid())
  vendorId     String
  paperStockId String
  vendorSku    String?    // Vendor's SKU for this paper stock
  vendorPrice  Float?     // Vendor's price per unit
  leadTime     Int?       // Lead time in days
  minQuantity  Int?       // Minimum order quantity
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  vendor       Vendor     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  paperStock   PaperStock @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  
  @@unique([vendorId, paperStockId])
}

model VendorProduct {
  id          String   @id @default(cuid())
  vendorId    String
  productId   String
  vendorSku   String?  // Vendor's SKU for this product
  vendorPrice Float?   // Vendor's base price
  isPreferred Boolean  @default(false) // Preferred vendor for this product
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([vendorId, productId])
}

model Quote {
  id              String      @id @default(cuid())
  quoteNumber     String      @unique
  userId          String?
  customerEmail   String
  customerName    String?
  customerPhone   String?
  productDetails  Json        // Full product configuration snapshot
  pricing         Json        // Complete pricing breakdown
  validUntil      DateTime    // Expiration date
  status          QuoteStatus @default(DRAFT)
  notes           String?
  createdBy       String?     // Admin who created the quote
  convertedToOrderId String?  // If converted to an order
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

model PushSubscription {
  id           String    @id @default(cuid())
  userId       String?
  endpoint     String    @unique
  subscription Json      // Full subscription object from browser
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([active])
}

model PushNotification {
  id           String    @id @default(cuid())
  userId       String
  type         String    // NotificationType from notifications.ts
  title        String
  body         String
  data         Json?     // Additional data (orderId, etc.)
  read         Boolean   @default(false)
  sentAt       DateTime  @default(now())
  readAt       DateTime?
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([sentAt])
}
