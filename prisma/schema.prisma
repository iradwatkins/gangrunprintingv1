generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerified   Boolean  @default(false)
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String?
  role            UserRole @default(CUSTOMER)
  isBroker        Boolean  @default(false)
  brokerDiscounts Json?

  // Marketing preferences
  marketingOptIn Boolean @default(true)
  smsOptIn       Boolean @default(false)
  phoneNumber    String?

  // Existing relations
  accounts          Account[]
  orders            Order[]
  pushNotifications PushNotification[]
  pushSubscriptions PushSubscription[]
  quotes            Quote[]
  sessions          Session[]

  // New marketing relations
  campaignSends      CampaignSend[]
  smsSends           SMSSend[]
  workflowExecutions WorkflowExecution[]
  journey            CustomerJourney?

  // Multi-tenancy relations
  tenantMemberships TenantUser[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PaperStock {
  id              String  @id @default(cuid())
  name            String  @unique
  weight          Float   @default(0.0015)
  pricePerSqInch  Float   @default(0.001)
  tooltipText     String?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  paperStockCoatings      PaperStockCoating[]
  paperStockSides         PaperStockSides[]
  productPaperStocks      ProductPaperStock[]
  vendorPaperStocks       VendorPaperStock[]
  paperException          PaperException?
}

model CoatingOption {
  id                 String              @id @default(cuid())
  name               String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  paperStockCoatings PaperStockCoating[]
}

model PaperStockCoating {
  paperStockId String
  coatingId    String
  isDefault    Boolean       @default(false)
  coating      CoatingOption @relation(fields: [coatingId], references: [id], onDelete: Cascade)
  paperStock   PaperStock    @relation(fields: [paperStockId], references: [id], onDelete: Cascade)

  @@id([paperStockId, coatingId])
  @@index([paperStockId])
  @@index([coatingId])
}

model SidesOption {
  id              String            @id @default(cuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  paperStockSides PaperStockSides[]
}

model PaperStockSides {
  paperStockId    String
  sidesOptionId   String
  priceMultiplier Float       @default(1.0)
  isEnabled       Boolean     @default(true)
  paperStock      PaperStock  @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  sidesOption     SidesOption @relation(fields: [sidesOptionId], references: [id], onDelete: Cascade)

  @@id([paperStockId, sidesOptionId])
  @@index([paperStockId])
  @@index([sidesOptionId])
}

model Product {
  id                    String                 @id @default(cuid())
  name                  String
  slug                  String                 @unique
  description           String?
  categoryId            String
  basePrice             Float
  isActive              Boolean                @default(true)
  isFeatured            Boolean                @default(false)
  metadata              Json?
  productionTime        Int
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  gangRunEligible       Boolean                @default(false)
  maxGangQuantity       Int?
  minGangQuantity       Int?
  rushAvailable         Boolean                @default(false)
  rushDays              Int?
  rushFee               Float?
  setupFee              Float                  @default(0)
  shortDescription      String?
  sku                   String                 @unique
  PricingTier           PricingTier[]
  ProductCategory       ProductCategory        @relation(fields: [categoryId], references: [id])
  productAddOns         ProductAddOn[]
  ProductImage          ProductImage[]
  ProductOption         ProductOption[]
  productPaperStocks    ProductPaperStock[]
  productQuantityGroups ProductQuantityGroup[]
  productSizeGroups     ProductSizeGroup[]
  vendorProducts        VendorProduct[]
  pricingConfig         ProductPricingConfig?
  productSizes          ProductSize[]
  productQuantities     ProductQuantity[]

  @@index([categoryId])
  @@index([slug])
}

model ProductPaperStock {
  productId      String
  paperStockId   String
  isDefault      Boolean    @default(false)
  additionalCost Float      @default(0)
  id             String     @id @default(cuid())
  paperStock     PaperStock @relation(fields: [paperStockId], references: [id])
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, paperStockId])
  @@index([productId])
  @@index([paperStockId])
}

model Order {
  id               String          @id @default(cuid())
  orderNumber      String          @unique @default(cuid())
  referenceNumber  String?         @unique
  userId           String?
  vendorId         String?
  subtotal         Float
  tax              Float
  shipping         Float
  total            Float
  shippingMethod   String?
  trackingNumber   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  adminNotes       String?
  carrier          Carrier?
  deleteAt         DateTime        @default(dbgenerated("(now() + '1 year'::interval)"))
  email            String
  paidAt           DateTime?
  phone            String?
  refundAmount     Float?
  refundedAt       DateTime?
  squareCustomerId String?
  squareOrderId    String?
  squarePaymentId  String?
  status           OrderStatus     @default(PENDING_PAYMENT)
  shippingAddress  Json
  billingAddress   Json?
  File             File[]
  Notification     Notification[]
  user             User?           @relation(fields: [userId], references: [id])
  vendor           Vendor?         @relation(fields: [vendorId], references: [id])
  OrderItem        OrderItem[]
  StatusHistory    StatusHistory[]
}

model File {
  id         String   @id
  orderId    String
  filename   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id
  orderId   String
  type      NotificationType
  sent      Boolean          @default(false)
  sentAt    DateTime?
  error     String?
  createdAt DateTime         @default(now())
  Order     Order            @relation(fields: [orderId], references: [id])
}

model OptionValue {
  id             String        @id
  optionId       String
  value          String
  displayName    String?
  additionalCost Float         @default(0)
  isDefault      Boolean       @default(false)
  sortOrder      Int           @default(0)
  width          Float?
  height         Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  ProductOption  ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([optionId])
}

model OrderItem {
  id              String           @id
  orderId         String
  quantity        Int
  createdAt       DateTime         @default(now())
  options         Json?
  price           Float
  productName     String
  productSku      String
  Order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderItemAddOns OrderItemAddOn[]
}

model PricingTier {
  id          String   @id
  productId   String
  minQuantity Int
  maxQuantity Int?
  unitPrice   Float
  setupFee    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, minQuantity])
  @@index([productId])
}

model ProductCategory {
  id          String    @id
  name        String    @unique
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Product     Product[]
}

model ProductImage {
  id           String   @id @default(cuid())
  productId    String
  url          String
  thumbnailUrl String?
  alt          String?
  caption      String?
  sortOrder    Int      @default(0)
  isPrimary    Boolean  @default(false)
  width        Int?
  height       Int?
  fileSize     Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductOption {
  id          String        @id
  productId   String
  name        String
  type        OptionType
  required    Boolean       @default(false)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  OptionValue OptionValue[]
  Product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model StatusHistory {
  id         String       @id
  orderId    String
  fromStatus OrderStatus?
  toStatus   OrderStatus
  notes      String?
  changedBy  String?
  createdAt  DateTime     @default(now())
  Order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model AddOn {
  id                       String           @id @default(cuid())
  name                     String           @unique
  description              String?
  tooltipText              String?
  pricingModel             PricingModel
  configuration            Json
  additionalTurnaroundDays Int              @default(0)
  sortOrder                Int              @default(0)
  isActive                 Boolean          @default(true)
  adminNotes               String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  subOptions               AddOnSubOption[]
  orderItemAddOns          OrderItemAddOn[]
  productAddOns            ProductAddOn[]
}

model AddOnSubOption {
  id             String   @id @default(cuid())
  addOnId        String
  name           String
  optionType     String
  options        Json?
  defaultValue   String?
  isRequired     Boolean  @default(false)
  affectsPricing Boolean  @default(false)
  tooltipText    String?
  displayOrder   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  addOn          AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
}

model ProductAddOn {
  id            String   @id @default(cuid())
  productId     String
  addOnId       String
  priceOverride Float?
  isMandatory   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  addOn         AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, addOnId])
}

model OrderItemAddOn {
  id              String    @id @default(cuid())
  orderItemId     String
  addOnId         String
  configuration   Json
  calculatedPrice Float
  createdAt       DateTime  @default(now())
  addOn           AddOn     @relation(fields: [addOnId], references: [id])
  orderItem       OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, addOnId])
}

model QuantityGroup {
  id           String                 @id @default(cuid())
  name         String                 @unique
  description  String?
  values       String
  defaultValue String
  customMin    Int?
  customMax    Int?
  sortOrder    Int                    @default(0)
  isActive     Boolean                @default(true)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  products     ProductQuantityGroup[]
}

model ProductQuantityGroup {
  id              String        @id @default(cuid())
  productId       String
  quantityGroupId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantityGroup   QuantityGroup @relation(fields: [quantityGroupId], references: [id], onDelete: Cascade)

  @@unique([productId, quantityGroupId])
  @@index([productId])
  @@index([quantityGroupId])
}

model SizeGroup {
  id              String             @id @default(cuid())
  name            String             @unique
  description     String?
  values          String
  defaultValue    String
  customMinWidth  Float?
  customMaxWidth  Float?
  customMinHeight Float?
  customMaxHeight Float?
  sortOrder       Int                @default(0)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  products        ProductSizeGroup[]
}

model ProductSizeGroup {
  id          String    @id @default(cuid())
  productId   String
  sizeGroupId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeGroup   SizeGroup @relation(fields: [sizeGroupId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeGroupId])
  @@index([productId])
  @@index([sizeGroupId])
}

model Vendor {
  id                  String             @id @default(cuid())
  name                String             @unique
  contactEmail        String
  orderEmail          String?
  phone               String?
  website             String?
  address             Json?
  supportedCarriers   String[]
  isActive            Boolean            @default(true)
  notes               String?
  turnaroundDays      Int                @default(3)
  minimumOrderAmount  Float?
  shippingCostFormula String?
  n8nWebhookUrl       String?
  apiCredentials      Json?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  orders              Order[]
  vendorPaperStocks   VendorPaperStock[]
  vendorProducts      VendorProduct[]
}

model VendorPaperStock {
  id           String     @id @default(cuid())
  vendorId     String
  paperStockId String
  vendorSku    String?
  vendorPrice  Float?
  leadTime     Int?
  minQuantity  Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  paperStock   PaperStock @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  vendor       Vendor     @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, paperStockId])
}

model VendorProduct {
  id          String   @id @default(cuid())
  vendorId    String
  productId   String
  vendorSku   String?
  vendorPrice Float?
  isPreferred Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, productId])
}

model Quote {
  id                 String      @id @default(cuid())
  quoteNumber        String      @unique
  userId             String?
  customerEmail      String
  customerName       String?
  customerPhone      String?
  productDetails     Json
  pricing            Json
  validUntil         DateTime
  status             QuoteStatus @default(DRAFT)
  notes              String?
  createdBy          String?
  convertedToOrderId String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user               User?       @relation(fields: [userId], references: [id])
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String?
  endpoint     String   @unique
  subscription Json
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([active])
}

model PushNotification {
  id     String    @id @default(cuid())
  userId String
  type   String
  title  String
  body   String
  data   Json?
  read   Boolean   @default(false)
  sentAt DateTime  @default(now())
  readAt DateTime?
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([sentAt])
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  CONFIRMATION
  PRE_PRESS
  ON_HOLD
  PROCESSING
  PRODUCTION
  PRINTING
  QUALITY_CHECK
  BINDERY
  PACKAGING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PAYMENT_FAILED
}

enum Carrier {
  FEDEX
  UPS
  SOUTHWEST_CARGO
}

enum NotificationType {
  ORDER_CONFIRMED
  PAYMENT_RECEIVED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_REFUNDED
}

enum OptionType {
  SELECT
  RADIO
  CHECKBOX
  TEXT
  NUMBER
  FILE
}

enum PricingModel {
  FLAT
  PERCENTAGE
  PER_UNIT
  CUSTOM
}

enum QuoteStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

// Marketing & Automation System Models

model MarketingCampaign {
  id               String         @id @default(cuid())
  name             String
  type             CampaignType
  status           CampaignStatus @default(DRAFT)
  subject          String?
  previewText      String?
  content          Json // Email template/content data
  senderName       String         @default("GangRun Printing")
  senderEmail      String         @default("noreply@gangrunprinting.com")
  replyToEmail     String?
  segmentId        String?
  scheduledAt      DateTime?
  sentAt           DateTime?
  completedAt      DateTime?
  isTemplate       Boolean        @default(false)
  templateName     String?
  tags             String[]
  settings         Json? // Additional campaign settings
  trackingPixelUrl String?
  utmCampaign      String?
  utmSource        String         @default("email")
  utmMedium        String         @default("email")
  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  segment   CustomerSegment?    @relation(fields: [segmentId], references: [id])
  sends     CampaignSend[]
  abTests   CampaignABTest[]
  analytics CampaignAnalytics[]

  @@index([status])
  @@index([type])
  @@index([scheduledAt])
  @@index([createdAt])
}

model CustomerSegment {
  id          String   @id @default(cuid())
  name        String
  description String?
  criteria    Json // Segmentation criteria and rules
  isActive    Boolean  @default(true)
  isDynamic   Boolean  @default(true) // Auto-update based on criteria
  customerIds String[] // Cached customer IDs for performance
  count       Int      @default(0)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaigns    MarketingCampaign[]
  workflows    MarketingWorkflow[]
  smsCampaigns SMSCampaign[]

  @@index([isActive])
  @@index([isDynamic])
}

model CampaignSend {
  id             String     @id @default(cuid())
  campaignId     String
  recipientEmail String
  recipientName  String?
  userId         String?
  status         SendStatus @default(PENDING)
  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  unsubscribedAt DateTime?
  bounceReason   String?
  errorMessage   String?
  trackingData   Json?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?             @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([recipientEmail])
  @@index([status])
  @@index([sentAt])
}

model CampaignABTest {
  id             String     @id @default(cuid())
  campaignId     String
  name           String
  description    String?
  testType       ABTestType
  variants       Json // A/B test variant configurations
  trafficSplit   Json // Percentage split between variants
  winnerCriteria String // Which metric determines winner
  confidence     Float      @default(95.0)
  isActive       Boolean    @default(true)
  winnerId       String? // ID of winning variant
  results        Json? // Test results and statistics
  startedAt      DateTime?
  endedAt        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([isActive])
}

model CampaignAnalytics {
  id           String   @id @default(cuid())
  campaignId   String
  date         DateTime @default(now())
  sent         Int      @default(0)
  delivered    Int      @default(0)
  opened       Int      @default(0)
  clicked      Int      @default(0)
  bounced      Int      @default(0)
  unsubscribed Int      @default(0)
  revenue      Float    @default(0)
  orders       Int      @default(0)
  uniqueOpens  Int      @default(0)
  uniqueClicks Int      @default(0)

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([campaignId])
  @@index([date])
}

model MarketingWorkflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  trigger     Json // Workflow trigger configuration
  steps       Json // Workflow steps and actions
  isActive    Boolean  @default(false)
  segmentId   String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  segment    CustomerSegment?    @relation(fields: [segmentId], references: [id])
  executions WorkflowExecution[]

  @@index([isActive])
}

model WorkflowExecution {
  id           String          @id @default(cuid())
  workflowId   String
  userId       String?
  triggerData  Json // Data that triggered the workflow
  currentStep  Int             @default(0)
  status       ExecutionStatus @default(RUNNING)
  completedAt  DateTime?
  errorMessage String?
  stepResults  Json? // Results from each step
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  workflow MarketingWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User?             @relation(fields: [userId], references: [id])

  @@index([workflowId])
  @@index([userId])
  @@index([status])
}

model CustomerJourney {
  id             String        @id @default(cuid())
  userId         String
  stage          CustomerStage @default(LEAD)
  score          Int           @default(0)
  lastActivity   DateTime      @default(now())
  totalSpent     Float         @default(0)
  orderCount     Int           @default(0)
  avgOrderValue  Float         @default(0)
  daysSinceFirst Int           @default(0)
  daysSinceLast  Int           @default(0)
  engagement     Json? // Engagement metrics
  preferences    Json? // Customer preferences
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  touchpoints CustomerTouchpoint[]

  @@unique([userId])
  @@index([stage])
  @@index([score])
  @@index([lastActivity])
}

model CustomerTouchpoint {
  id        String         @id @default(cuid())
  journeyId String
  type      TouchpointType
  channel   String
  action    String
  details   Json?
  timestamp DateTime       @default(now())

  // Relations
  journey CustomerJourney @relation(fields: [journeyId], references: [id], onDelete: Cascade)

  @@index([journeyId])
  @@index([type])
  @@index([timestamp])
}

model SMSCampaign {
  id          String         @id @default(cuid())
  name        String
  message     String
  segmentId   String?
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  segment CustomerSegment? @relation(fields: [segmentId], references: [id])
  sends   SMSSend[]

  @@index([status])
  @@index([scheduledAt])
}

model SMSSend {
  id           String     @id @default(cuid())
  campaignId   String
  phoneNumber  String
  userId       String?
  status       SendStatus @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  errorMessage String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  campaign SMSCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?       @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([phoneNumber])
  @@index([status])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  subject     String
  content     Json // Template content structure
  previewText String?
  thumbnail   String?
  isPublic    Boolean  @default(false)
  tags        String[]
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model MarketingAsset {
  id         String    @id @default(cuid())
  name       String
  type       AssetType
  url        String
  fileSize   Int?
  dimensions Json? // Width/height for images
  alt        String?
  tags       String[]
  folder     String?
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([type])
  @@index([folder])
}

model N8NWebhook {
  id            String          @id @default(cuid())
  name          String
  url           String          @unique
  trigger       String // Event that triggers this webhook
  isActive      Boolean         @default(true)
  description   String?
  payload       Json? // Expected payload structure
  lastTriggered DateTime?
  triggerCount  Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  logs          N8NWebhookLog[]

  @@index([trigger])
  @@index([isActive])
}

model N8NWebhookLog {
  id         String   @id @default(cuid())
  webhookId  String
  payload    Json
  response   Json?
  status     Int      @default(200)
  executedAt DateTime @default(now())

  // Relations
  webhook N8NWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([executedAt])
}

// Enums for the marketing system
enum CampaignType {
  EMAIL
  SMS
  PUSH
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum SendStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

enum ABTestType {
  SUBJECT_LINE
  CONTENT
  SEND_TIME
  SENDER_NAME
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum CustomerStage {
  LEAD
  PROSPECT
  FIRST_TIME
  REPEAT
  VIP
  CHURNED
  REACTIVATED
}

enum TouchpointType {
  EMAIL_OPEN
  EMAIL_CLICK
  WEBSITE_VISIT
  ORDER_PLACED
  SUPPORT_CONTACT
  SMS_RECEIVED
  PUSH_RECEIVED
  LOGIN
  LOGOUT
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  TEMPLATE
}

// Localization & White-label Platform Models

model Tenant {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  domain        String?    @unique // Custom domain
  subdomain     String     @unique // tenant.gangrunprinting.com
  isActive      Boolean    @default(true)
  plan          TenantPlan @default(BASIC)
  settings      Json? // Tenant-specific settings
  branding      Json? // Branding configuration
  locales       String[]   @default(["en"]) // Supported locales
  defaultLocale String     @default("en")
  timezone      String     @default("America/Chicago")
  currency      String     @default("USD")

  // Contact & billing info
  contactEmail String
  contactName  String?
  contactPhone String?
  billingEmail String?

  // Feature flags
  features Json? // Feature configuration per tenant

  // Dates
  trialEndsAt DateTime?
  suspendedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  domains            TenantDomain[]
  brands             TenantBrand[]
  translations       Translation[]
  users              TenantUser[]
  TranslationRequest TranslationRequest[]

  @@index([slug])
  @@index([domain])
  @@index([subdomain])
  @@index([isActive])
}

model TenantDomain {
  id         String  @id @default(cuid())
  tenantId   String
  domain     String  @unique
  isVerified Boolean @default(false)
  isPrimary  Boolean @default(false)
  sslEnabled Boolean @default(false)

  // DNS verification
  verificationToken  String?
  verificationMethod String? // TXT, CNAME, FILE
  verificationStatus String? // PENDING, VERIFIED, FAILED

  // SSL certificate info
  sslCertificateId String?
  sslExpiresAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([domain])
  @@index([isVerified])
}

model TenantUser {
  id       String         @id @default(cuid())
  tenantId String
  userId   String
  role     TenantUserRole @default(MEMBER)
  joinedAt DateTime       @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
}

model TenantBrand {
  id        String  @id @default(cuid())
  tenantId  String
  name      String
  isDefault Boolean @default(false)

  // Visual branding
  logoUrl    String?
  logoText   String?
  faviconUrl String?

  // Color scheme
  primaryColor    String @default("#3b82f6")
  secondaryColor  String @default("#64748b")
  accentColor     String @default("#f59e0b")
  backgroundColor String @default("#ffffff")
  textColor       String @default("#1f2937")

  // Typography
  primaryFont   String @default("Inter")
  secondaryFont String @default("Inter")
  fontSize      String @default("16px")

  // Layout & spacing
  borderRadius String @default("8px")
  spacing      String @default("16px")

  // Custom CSS
  customCss String?
  customJs  String?

  // Email branding
  emailHeaderLogo String?
  emailFooterText String?
  emailColors     Json?

  // Dates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([isDefault])
}

model Translation {
  id        String  @id @default(cuid())
  tenantId  String? // null for global translations
  key       String // Translation key (e.g., "common.welcome")
  namespace String  @default("common") // Namespace for organization
  locale    String // Language code (en, es, fr, etc.)
  value     String // Translated text

  // Translation metadata
  context       String? // Context for translators
  pluralization Json? // Plural forms for different counts
  interpolation String[] @default([]) // Variables that can be interpolated

  // Quality & approval
  isApproved   Boolean           @default(false)
  confidence   Float? // Auto-translation confidence score
  source       TranslationSource @default(MANUAL)
  translatedBy String? // User ID who created/approved

  // Auto-translation data
  autoTranslated   Boolean @default(false)
  originalText     String? // Original text before translation
  translationModel String? // AI model used for translation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key, namespace, locale])
  @@index([tenantId])
  @@index([key])
  @@index([namespace])
  @@index([locale])
  @@index([isApproved])
  @@index([source])
}

model TranslationRequest {
  id             String  @id @default(cuid())
  tenantId       String?
  key            String
  namespace      String  @default("common")
  sourceLocale   String  @default("en")
  targetLocale   String
  sourceText     String
  translatedText String?

  status   TranslationStatus   @default(PENDING)
  priority TranslationPriority @default(NORMAL)
  context  String?
  notes    String?

  // Assignment
  assignedTo  String? // User ID
  assignedAt  DateTime?
  completedAt DateTime?

  // Auto-translation
  autoAttempted  Boolean @default(false)
  autoResult     String?
  autoConfidence Float?

  requestedBy String // User ID who requested
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([status])
  @@index([assignedTo])
  @@index([targetLocale])
}

model Locale {
  id         String @id @default(cuid())
  code       String @unique // en, es, fr, etc.
  name       String // English, Spanish, French
  nativeName String // English, Español, Français
  direction  String @default("ltr") // ltr or rtl

  // Regional settings
  dateFormat     String @default("MM/dd/yyyy")
  timeFormat     String @default("h:mm a")
  numberFormat   Json // Number formatting rules
  currencyFormat Json // Currency formatting rules

  // Display settings
  flag      String? // Flag emoji or icon
  isActive  Boolean @default(true)
  sortOrder Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}

model Currency {
  id     String @id @default(cuid())
  code   String @unique // USD, EUR, GBP, etc.
  name   String // US Dollar, Euro, British Pound
  symbol String // $, €, £

  // Exchange rate (relative to USD)
  exchangeRate Float    @default(1.0)
  lastUpdated  DateTime @default(now())

  // Formatting
  decimalPlaces      Int    @default(2)
  thousandsSeparator String @default(",")
  decimalSeparator   String @default(".")
  symbolPosition     String @default("before") // before, after

  // Regional settings
  countries String[] // Countries that use this currency
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}

model ExchangeRate {
  id           String @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  source       String @default("api") // api, manual, calculated

  validFrom DateTime  @default(now())
  validTo   DateTime?
  createdAt DateTime  @default(now())

  @@unique([fromCurrency, toCurrency, validFrom])
  @@index([fromCurrency])
  @@index([toCurrency])
  @@index([validFrom])
}

model ThemeTemplate {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  category    String  @default("business")

  // Preview
  thumbnail  String?
  previewUrl String?

  // Theme configuration
  colors     Json // Color palette
  typography Json // Font settings
  layout     Json // Layout settings
  components Json // Component styles

  // Metadata
  isPremium Boolean  @default(false)
  isActive  Boolean  @default(true)
  tags      String[] @default([])

  createdBy String // User ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isPremium])
  @@index([isActive])
}

// Enums for Localization & White-label

enum TenantPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum TenantUserRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum TranslationSource {
  MANUAL
  AUTO_OPENAI
  AUTO_GOOGLE
  IMPORT
  API
}

enum TranslationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  NEEDS_REVIEW
}

enum TranslationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// CustomTheme model for theme management
model CustomTheme {
  id          String   @id @default(cuid())
  name        String
  description String?

  // Theme variables stored as JSON
  cssVariables      Json
  darkModeVariables Json?
  customCSS         String?

  // Status
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

// ==========================================
// PRICING FORMULA TABLES
// ==========================================

// Pre-calculated standard sizes with backend values
model StandardSize {
  id                 String   @id @default(cuid())
  name               String   @unique // "4x6", "5x5", etc.
  displayName        String   // "4″ × 6″ Standard"
  width              Float    // 4.0
  height             Float    // 6.0
  preCalculatedValue Float    // 24.0 - THE CRITICAL BACKEND VALUE
  sortOrder          Int      @default(0)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  productSizes ProductSize[]

  @@index([isActive])
  @@index([sortOrder])
}

// Standard quantities with adjustment values
model StandardQuantity {
  id               String   @id @default(cuid())
  displayValue     Int      @unique // 200 - what customer sees
  calculationValue Int      // 250 - what backend uses (for <5000)
  adjustmentValue  Int?     // Optional override for specific cases
  sortOrder        Int      @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  productQuantities ProductQuantity[]

  @@index([isActive])
  @@index([sortOrder])
}

// Paper type exceptions for sides multiplier
model PaperException {
  id                    String     @id @default(cuid())
  paperStockId          String     @unique
  exceptionType         String     // "TEXT_PAPER", etc.
  doubleSidedMultiplier Float      @default(1.75)
  description           String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // Relations
  paperStock PaperStock @relation(fields: [paperStockId], references: [id], onDelete: Cascade)

  @@index([exceptionType])
}

// Product-specific pricing configuration
model ProductPricingConfig {
  id                  String   @id @default(cuid())
  productId           String   @unique
  allowCustomSize     Boolean  @default(false)
  allowCustomQuantity Boolean  @default(false)
  minCustomWidth      Float?   // Minimum width for custom size
  maxCustomWidth      Float?   // Maximum width for custom size
  minCustomHeight     Float?   // Minimum height for custom size
  maxCustomHeight     Float?   // Maximum height for custom size
  minCustomQuantity   Int?     // Minimum custom quantity
  maxCustomQuantity   Int?     // Maximum custom quantity
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Product-to-Size relationship
model ProductSize {
  id             String   @id @default(cuid())
  productId      String
  standardSizeId String
  isDefault      Boolean  @default(false)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  standardSize StandardSize @relation(fields: [standardSizeId], references: [id], onDelete: Cascade)

  @@unique([productId, standardSizeId])
  @@index([productId])
  @@index([standardSizeId])
}

// Product-to-Quantity relationship
model ProductQuantity {
  id                 String   @id @default(cuid())
  productId          String
  standardQuantityId String
  isDefault          Boolean  @default(false)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  product          Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  standardQuantity StandardQuantity @relation(fields: [standardQuantityId], references: [id], onDelete: Cascade)

  @@unique([productId, standardQuantityId])
  @@index([productId])
  @@index([standardQuantityId])
}
