import { test, expect } from '@playwright/test'\n\ntest.describe('Product Page Fix Verification', () => {\n  test('should load product page without JSON parsing errors', async ({ page }) => {\n    // Track console errors\n    const consoleErrors = []\n    page.on('console', msg => {\n      if (msg.type() === 'error') {\n        consoleErrors.push(msg.text())\n        console.log(`Console Error: ${msg.text()}`)\n      }\n    })\n\n    // Track page errors\n    const pageErrors = []\n    page.on('pageerror', error => {\n      pageErrors.push(error.message)\n      console.log(`Page Error: ${error.message}`)\n    })\n\n    console.log('üîç Testing Premium Business Cards page...')\n    \n    // Navigate to a specific product\n    await page.goto('https://gangrunprinting.com/products/premium-business-cards')\n    \n    // Wait for page to load\n    await page.waitForTimeout(5000)\n    \n    console.log(`üìÑ Current URL: ${page.url()}`)\n    \n    // Check if we have any JSON parsing errors\n    const hasJSONErrors = consoleErrors.some(error => \n      error.includes('JSON') || \n      error.includes('Unexpected') || \n      error.includes('SyntaxError')\n    )\n    \n    console.log(`‚ùå JSON Parsing Errors: ${hasJSONErrors}`)\n    console.log(`üìä Total Console Errors: ${consoleErrors.length}`)\n    console.log(`üìä Total Page Errors: ${pageErrors.length}`)\n    \n    if (consoleErrors.length > 0) {\n      console.log('Console Errors:')\n      consoleErrors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error}`)\n      })\n    }\n    \n    if (pageErrors.length > 0) {\n      console.log('Page Errors:')\n      pageErrors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error}`)\n      })\n    }\n    \n    // Check for product content\n    const hasProductTitle = await page.locator('h1').isVisible()\n    const hasProductCategory = await page.locator('[class*=\"badge\"], .badge').isVisible()\n    const hasProductDescription = await page.locator('p').first().isVisible()\n    \n    console.log(`üìù Product Title Visible: ${hasProductTitle}`)\n    console.log(`üè∑Ô∏è Product Category Visible: ${hasProductCategory}`)\n    console.log(`üìÑ Product Description Visible: ${hasProductDescription}`)\n    \n    if (hasProductTitle) {\n      const title = await page.locator('h1').first().textContent()\n      console.log(`üìù Product Title: ${title}`)\n    }\n    \n    // Look for dropdowns/selectors\n    const hasSelectors = await page.locator('select, [role=\"combobox\"]').count()\n    console.log(`üîΩ Dropdowns/Selectors found: ${hasSelectors}`)\n    \n    // Look for add to cart button\n    const hasAddToCart = await page.locator('button:has-text(\"Add to Cart\"), button:has-text(\"Add to Bag\")').isVisible()\n    console.log(`üõí Add to Cart Button: ${hasAddToCart}`)\n    \n    // Take screenshot\n    await page.screenshot({ path: 'product-page-fixed.png', fullPage: true })\n    console.log('üì∏ Screenshot saved as product-page-fixed.png')\n    \n    // Assertions\n    expect(hasJSONErrors).toBe(false)\n    expect(hasProductTitle || hasProductDescription).toBe(true)\n  })\n  \n  test('should test all seeded products', async ({ page }) => {\n    const products = [\n      'premium-business-cards',\n      'full-color-flyers', \n      'glossy-postcards',\n      'large-format-posters',\n      'die-cut-stickers'\n    ]\n    \n    for (const productSlug of products) {\n      console.log(`\\nüéØ Testing product: ${productSlug}`)\n      \n      const consoleErrors = []\n      page.on('console', msg => {\n        if (msg.type() === 'error' && (msg.text().includes('JSON') || msg.text().includes('SyntaxError'))) {\n          consoleErrors.push(msg.text())\n        }\n      })\n      \n      await page.goto(`https://gangrunprinting.com/products/${productSlug}`)\n      await page.waitForTimeout(3000)\n      \n      const hasJSONErrors = consoleErrors.length > 0\n      const isProductPage = page.url().includes(`/products/${productSlug}`)\n      const hasContent = await page.locator('h1, [data-testid=\"product-title\"]').isVisible()\n      \n      console.log(`   ‚úÖ Page loads: ${isProductPage}`)\n      console.log(`   ‚úÖ Has content: ${hasContent}`)\n      console.log(`   ‚ùå JSON errors: ${hasJSONErrors}`)\n      \n      if (hasJSONErrors) {\n        console.log(`   Errors: ${consoleErrors.join(', ')}`)\n      }\n      \n      expect(hasJSONErrors).toBe(false)\n    }\n  })\n})"