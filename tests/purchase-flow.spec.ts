import { test, expect } from '@playwright/test'\n\ntest.describe('Complete Purchase Flow Tests', () => {\n  test('should complete full purchase journey from product to checkout', async ({ page }) => {\n    console.log('🛒 Testing complete purchase flow...')\n\n    // Start from homepage\n    await page.goto('https://gangrunprinting.com/')\n    await page.waitForTimeout(2000)\n\n    console.log('🏠 Started from homepage')\n\n    // Navigate to products\n    const productsLink = page.locator('a[href*=\"/products\"], text=\"Products\"').first()\n    if (await productsLink.isVisible()) {\n      await productsLink.click()\n      await page.waitForTimeout(2000)\n    } else {\n      await page.goto('https://gangrunprinting.com/products')\n      await page.waitForTimeout(2000)\n    }\n\n    console.log('🛍️ Navigated to products page')\n\n    // Try to find and click on a product\n    const productSelectors = [\n      'a[href*=\"/products/premium-business-cards\"]',\n      'a[href*=\"/products/full-color-flyers\"]',\n      'a[href*=\"/products/glossy-postcards\"]',\n      '[data-testid=\"product-card\"] a',\n      '.product-card a',\n      'a[href*=\"/products/\"]'\n    ]\n\n    let productFound = false\n    for (const selector of productSelectors) {\n      const productLink = page.locator(selector).first()\n      if (await productLink.isVisible()) {\n        console.log(`🎯 Found product link: ${selector}`)\n        await productLink.click()\n        await page.waitForTimeout(3000)\n        productFound = true\n        break\n      }\n    }\n\n    if (!productFound) {\n      // Try direct navigation to a specific product\n      console.log('🔗 Direct navigation to business cards product')\n      await page.goto('https://gangrunprinting.com/products/premium-business-cards')\n      await page.waitForTimeout(3000)\n    }\n\n    console.log(`📄 Current URL: ${page.url()}`)\n\n    // Check if we're on a product page\n    const isProductPage = page.url().includes('/products/')\n    console.log(`🏷️ On product page: ${isProductPage}`)\n\n    if (isProductPage) {\n      // Look for product details\n      const productTitle = await page.locator('h1, [data-testid=\"product-title\"]').first().textContent()\n      console.log(`📝 Product title: ${productTitle}`)\n\n      // Look for pricing information\n      const priceElements = page.locator('text=/\\$\\d+/, [data-testid=\"price\"], .price')\n      const priceCount = await priceElements.count()\n      console.log(`💰 Price elements found: ${priceCount}`)\n\n      // Look for quantity selector\n      const quantitySelectors = [\n        'select[name=\"quantity\"]',\n        'input[name=\"quantity\"]',\n        '[data-testid=\"quantity\"]',\n        'select:has(option)'\n      ]\n\n      let quantityFound = false\n      for (const selector of quantitySelectors) {\n        const quantityElement = page.locator(selector)\n        if (await quantityElement.isVisible()) {\n          console.log(`🔢 Found quantity selector: ${selector}`)\n          quantityFound = true\n          break\n        }\n      }\n\n      console.log(`📊 Quantity selector available: ${quantityFound}`)\n\n      // Look for add to cart or similar action buttons\n      const actionButtonSelectors = [\n        'button:has-text(\"Add to Cart\")',\n        'button:has-text(\"Add to Bag\")',\n        'button:has-text(\"Order Now\")',\n        'button:has-text(\"Get Quote\")',\n        'button:has-text(\"Configure\")',\n        'button:has-text(\"Customize\")',\n        '[data-testid=\"add-to-cart\"]',\n        '[data-testid=\"order-button\"]'\n      ]\n\n      let actionButtonFound = false\n      let clickedButton = null\n\n      for (const selector of actionButtonSelectors) {\n        const button = page.locator(selector).first()\n        if (await button.isVisible()) {\n          console.log(`🛒 Found action button: ${selector}`)\n          const buttonText = await button.textContent()\n          console.log(`   Button text: ${buttonText}`)\n          \n          // Try to click the button\n          try {\n            await button.click()\n            await page.waitForTimeout(2000)\n            actionButtonFound = true\n            clickedButton = buttonText\n            console.log(`✅ Successfully clicked: ${buttonText}`)\n            break\n          } catch (error) {\n            console.log(`❌ Failed to click button: ${buttonText}`)\n          }\n        }\n      }\n\n      console.log(`🎯 Action button interaction: ${actionButtonFound}`)\n\n      if (actionButtonFound) {\n        // Check if we were redirected to cart/checkout\n        const currentUrl = page.url()\n        console.log(`🌐 URL after button click: ${currentUrl}`)\n\n        const inCart = currentUrl.includes('/cart') || currentUrl.includes('/checkout')\n        console.log(`🛒 Redirected to cart/checkout: ${inCart}`)\n\n        if (inCart) {\n          // We're in the cart/checkout flow\n          console.log('🎉 Successfully entered checkout flow!')\n\n          // Look for cart items\n          const cartItems = page.locator('[data-testid=\"cart-item\"], .cart-item, tr:has(td)')\n          const cartItemCount = await cartItems.count()\n          console.log(`📦 Cart items found: ${cartItemCount}`)\n\n          // Look for total/subtotal\n          const totalElements = page.locator('text=/Total|Subtotal/, [data-testid=\"total\"], .total')\n          const totalCount = await totalElements.count()\n          console.log(`💵 Total/Subtotal elements: ${totalCount}`)\n\n          // Look for checkout button\n          const checkoutButtons = page.locator('button:has-text(\"Checkout\"), button:has-text(\"Proceed\"), a:has-text(\"Checkout\")')\n          const checkoutButtonExists = await checkoutButtons.first().isVisible()\n          console.log(`▶️ Checkout button available: ${checkoutButtonExists}`)\n\n          if (checkoutButtonExists) {\n            console.log('🎯 Testing checkout button...')\n            try {\n              await checkoutButtons.first().click()\n              await page.waitForTimeout(3000)\n              \n              const checkoutUrl = page.url()\n              console.log(`🌐 Checkout page URL: ${checkoutUrl}`)\n              \n              // Look for payment/billing forms\n              const paymentForms = page.locator('form, [data-testid=\"payment-form\"], input[name=\"email\"], input[type=\"email\"]')\n              const paymentFormCount = await paymentForms.count()\n              console.log(`💳 Payment form elements: ${paymentFormCount}`)\n\n              if (paymentFormCount > 0) {\n                console.log('✅ Successfully reached payment/checkout form!')\n              }\n            } catch (error) {\n              console.log(`❌ Error clicking checkout: ${error}`)\n            }\n          }\n        } else {\n          // Check if we're on a configuration/customization page\n          const isConfigPage = currentUrl.includes('/configure') || currentUrl.includes('/customize')\n          console.log(`⚙️ On configuration page: ${isConfigPage}`)\n\n          if (isConfigPage) {\n            console.log('🔧 Product configuration flow detected')\n            \n            // Look for configuration options\n            const configOptions = page.locator('select, input[type=\"radio\"], input[type=\"checkbox\"], [data-testid=\"option\"]')\n            const configCount = await configOptions.count()\n            console.log(`⚙️ Configuration options: ${configCount}`)\n\n            // Look for next/continue button\n            const continueButtons = page.locator('button:has-text(\"Continue\"), button:has-text(\"Next\"), button:has-text(\"Add to Cart\")')\n            const continueButtonExists = await continueButtons.first().isVisible()\n            console.log(`▶️ Continue button available: ${continueButtonExists}`)\n          }\n        }\n      }\n    }\n\n    // Take screenshot of final state\n    await page.screenshot({ path: 'purchase-flow-test.png', fullPage: true })\n    console.log('📸 Screenshot saved as purchase-flow-test.png')\n\n    console.log('\\n📊 Purchase Flow Test Summary:')\n    console.log(`   Product page reached: ${isProductPage}`)\n    console.log(`   Action button available: ${actionButtonFound}`)\n    console.log(`   Current URL: ${page.url()}`)\n  })\n\n  test('should test cart functionality if available', async ({ page }) => {\n    console.log('🛒 Testing cart functionality...')\n\n    // Go directly to cart page\n    await page.goto('https://gangrunprinting.com/cart')\n    await page.waitForTimeout(2000)\n\n    const cartUrl = page.url()\n    console.log(`🌐 Cart page URL: ${cartUrl}`)\n\n    // Check if cart page exists (not 404)\n    const notFoundIndicators = [\n      'text=404',\n      'text=Not Found',\n      'text=Page not found'\n    ]\n\n    let isNotFound = false\n    for (const indicator of notFoundIndicators) {\n      if (await page.locator(indicator).isVisible()) {\n        isNotFound = true\n        break\n      }\n    }\n\n    console.log(`🛒 Cart page exists: ${!isNotFound}`)\n\n    if (!isNotFound) {\n      // Look for cart-related elements\n      const cartElements = [\n        'text=Cart',\n        'text=Shopping Cart',\n        '[data-testid=\"cart\"]',\n        '.cart',\n        'text=Empty',\n        'text=Items'\n      ]\n\n      for (const element of cartElements) {\n        const exists = await page.locator(element).isVisible()\n        if (exists) {\n          console.log(`✅ Found cart element: ${element}`)\n        }\n      }\n    }\n  })\n\n  test('should test checkout page accessibility', async ({ page }) => {\n    console.log('💳 Testing checkout page accessibility...')\n\n    // Try common checkout URLs\n    const checkoutUrls = [\n      'https://gangrunprinting.com/checkout',\n      'https://gangrunprinting.com/order',\n      'https://gangrunprinting.com/payment'\n    ]\n\n    for (const url of checkoutUrls) {\n      console.log(`🔍 Testing: ${url}`)\n      \n      await page.goto(url)\n      await page.waitForTimeout(2000)\n\n      const notFoundIndicators = [\n        'text=404',\n        'text=Not Found',\n        'text=Page not found'\n      ]\n\n      let isNotFound = false\n      for (const indicator of notFoundIndicators) {\n        if (await page.locator(indicator).isVisible()) {\n          isNotFound = true\n          break\n        }\n      }\n\n      const pageExists = !isNotFound\n      console.log(`   Page exists: ${pageExists}`)\n\n      if (pageExists) {\n        // Look for checkout/payment form elements\n        const checkoutElements = [\n          'input[type=\"email\"]',\n          'input[name=\"email\"]',\n          'form',\n          'text=Billing',\n          'text=Shipping',\n          'text=Payment',\n          'button:has-text(\"Place Order\")',\n          'button:has-text(\"Complete\")',\n          '[data-testid=\"checkout-form\"]'\n        ]\n\n        for (const element of checkoutElements) {\n          const exists = await page.locator(element).isVisible()\n          if (exists) {\n            console.log(`   ✅ Found: ${element}`)\n          }\n        }\n      }\n    }\n  })\n\n  test('should test quote/custom order functionality', async ({ page }) => {\n    console.log('📝 Testing quote/custom order functionality...')\n\n    // Try quote page\n    await page.goto('https://gangrunprinting.com/quote')\n    await page.waitForTimeout(2000)\n\n    const quoteUrl = page.url()\n    console.log(`🌐 Quote page URL: ${quoteUrl}`)\n\n    // Check if quote page exists\n    const notFoundIndicators = [\n      'text=404',\n      'text=Not Found',\n      'text=Page not found'\n    ]\n\n    let isNotFound = false\n    for (const indicator of notFoundIndicators) {\n      if (await page.locator(indicator).isVisible()) {\n        isNotFound = true\n        break\n      }\n    }\n\n    const quotePageExists = !isNotFound\n    console.log(`📝 Quote page exists: ${quotePageExists}`)\n\n    if (quotePageExists) {\n      // Look for quote form elements\n      const quoteElements = [\n        'form',\n        'input[type=\"email\"]',\n        'textarea',\n        'text=Quote',\n        'text=Custom',\n        'text=Request',\n        'button:has-text(\"Submit\")',\n        'button:has-text(\"Get Quote\")',\n        '[data-testid=\"quote-form\"]'\n      ]\n\n      for (const element of quoteElements) {\n        const exists = await page.locator(element).isVisible()\n        if (exists) {\n          console.log(`   ✅ Found quote element: ${element}`)\n        }\n      }\n    }\n\n    console.log('📊 Quote functionality test completed')\n  })\n})"