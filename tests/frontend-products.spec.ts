import { test, expect } from '@playwright/test'

test.describe('Frontend Products Display Tests', () => {
  test('should display products on the main site', async ({ page }) => {
    console.log('üõçÔ∏è Testing frontend product display...')

    // Navigate to the main site
    await page.goto('https://gangrunprinting.com/')

    // Wait for page to load
    await page.waitForTimeout(3000)

    console.log('üåê Homepage loaded, looking for products...')

    // Check if there are product links or a products page
    const productsLink = page.locator('a[href*="/products"], a:has-text("Products"), a:has-text("Shop")')
    const productsLinkExists = await productsLink.first().isVisible()
    console.log('üîó Products link found:', productsLinkExists)

    if (productsLinkExists) {
      await productsLink.first().click()
      await page.waitForTimeout(2000)
      console.log('üåê Navigated to products page:', page.url())
    } else {
      // Try direct navigation to products page
      await page.goto('https://gangrunprinting.com/products')
      await page.waitForTimeout(2000)
      console.log('üåê Direct navigation to products page:', page.url())
    }

    // Check if we have any product listings
    const productSelectors = [\n      '[data-testid="product"]',\n      '.product-card',\n      '[class*="product"]',\n      'a[href*="/products/"]'\n    ]\n\n    let foundProducts = false\n    let productCount = 0\n\n    for (const selector of productSelectors) {\n      const products = page.locator(selector)\n      productCount = await products.count()\n      if (productCount > 0) {\n        foundProducts = true\n        console.log(`‚úÖ Found ${productCount} products using selector: ${selector}`)\n        break\n      }\n    }\n\n    if (!foundProducts) {\n      // Check for our specific seeded products by name\n      const expectedProducts = [\n        'Premium Business Cards',\n        'Full Color Flyers',\n        'Glossy Postcards',\n        'Large Format Posters',\n        'Die Cut Stickers'\n      ]\n\n      console.log('üîç Searching for specific product names...')\n      for (const productName of expectedProducts) {\n        const productExists = await page.locator(`text=${productName}`).isVisible()\n        if (productExists) {\n          foundProducts = true\n          console.log(`‚úÖ Found product: ${productName}`)\n        } else {\n          console.log(`‚ùå Product not found: ${productName}`)\n        }\n      }\n    }\n\n    // Test individual product pages\n    if (foundProducts && productCount > 0) {\n      console.log('üéØ Testing individual product page...')\n      \n      // Try to click on the first product\n      const firstProduct = page.locator(productSelectors.find(s => page.locator(s).count() > 0) || 'a[href*="/products/"]').first()\n      \n      if (await firstProduct.isVisible()) {\n        await firstProduct.click()\n        await page.waitForTimeout(2000)\n        \n        const productPageUrl = page.url()\n        console.log('üåê Product page URL:', productPageUrl)\n        \n        if (productPageUrl.includes('/products/')) {\n          console.log('‚úÖ Successfully navigated to product page')\n          \n          // Check for product details\n          const productTitle = await page.locator('h1, [data-testid="product-title"]').first().textContent()\n          console.log('üìù Product title:', productTitle)\n          \n          // Check for pricing info\n          const priceElements = page.locator('[data-testid="price"], .price, [class*="price"]')\n          const priceCount = await priceElements.count()\n          console.log('üí∞ Price elements found:', priceCount)\n          \n          // Check for add to cart or similar buttons\n          const actionButtons = page.locator('button:has-text("Add"), button:has-text("Order"), button:has-text("Buy"), button:has-text("Quote")')\n          const actionButtonCount = await actionButtons.count()\n          console.log('üõí Action buttons found:', actionButtonCount)\n        }\n      }\n    }\n\n    // Take screenshot\n    await page.screenshot({ path: 'frontend-products-test.png', fullPage: true })\n    console.log('üì∏ Screenshot saved as frontend-products-test.png')\n\n    console.log('üìä Frontend Products Test Summary:')\n    console.log(`   Products found: ${foundProducts}`)\n    console.log(`   Product count: ${productCount}`)\n    console.log(`   Current URL: ${page.url()}`)\n  })\n\n  test('should test individual product page functionality', async ({ page }) => {\n    console.log('üéØ Testing specific product page functionality...')\n\n    // Test each of our seeded products directly\n    const productSlugs = [\n      'premium-business-cards',\n      'full-color-flyers',\n      'glossy-postcards',\n      'large-format-posters',\n      'die-cut-stickers'\n    ]\n\n    for (const slug of productSlugs) {\n      console.log(`\\nüîç Testing product: ${slug}`)\n      \n      await page.goto(`https://gangrunprinting.com/products/${slug}`)\n      await page.waitForTimeout(2000)\n      \n      const currentUrl = page.url()\n      console.log(`   URL: ${currentUrl}`)\n      \n      // Check if we get a 404 or the page loads\n      const notFoundIndicators = [\n        'text=404',\n        'text=Not Found',\n        'text=Page not found',\n        '[data-testid="404"]'\n      ]\n      \n      let isNotFound = false\n      for (const indicator of notFoundIndicators) {\n        if (await page.locator(indicator).isVisible()) {\n          isNotFound = true\n          break\n        }\n      }\n      \n      if (isNotFound) {\n        console.log(`   ‚ùå Product page not found (404)`)\n      } else {\n        console.log(`   ‚úÖ Product page loaded successfully`)\n        \n        // Check for basic product page elements\n        const title = await page.locator('h1').first().textContent()\n        console.log(`   Title: ${title}`)\n        \n        const hasDescription = await page.locator('p, div').filter({ hasText: /description|detail/i }).isVisible()\n        console.log(`   Has description: ${hasDescription}`)\n        \n        const hasPrice = await page.locator('text=/\\$\\d+/').isVisible()\n        console.log(`   Has price: ${hasPrice}`)\n      }\n    }\n  })\n\n  test('should test product search and filtering', async ({ page }) => {\n    console.log('üîç Testing product search and filtering...')\n\n    await page.goto('https://gangrunprinting.com/products')\n    await page.waitForTimeout(2000)\n\n    // Look for search functionality\n    const searchSelectors = [\n      'input[type=\"search\"]',\n      'input[placeholder*=\"search\"]',\n      'input[placeholder*=\"Search\"]',\n      '[data-testid=\"search\"]'\n    ]\n\n    let searchFound = false\n    for (const selector of searchSelectors) {\n      const searchInput = page.locator(selector)\n      if (await searchInput.isVisible()) {\n        searchFound = true\n        console.log(`‚úÖ Search input found: ${selector}`)\n        \n        // Try searching for one of our products\n        await searchInput.fill('business cards')\n        await page.waitForTimeout(1000)\n        \n        // Check if results update\n        const resultsChanged = await page.locator('text=Premium Business Cards').isVisible()\n        console.log(`   Search results update: ${resultsChanged}`)\n        break\n      }\n    }\n\n    if (!searchFound) {\n      console.log('‚ùå No search functionality found')\n    }\n\n    // Look for category filtering\n    const categorySelectors = [\n      'select:has(option)',\n      '[data-testid=\"category\"]',\n      'button:has-text(\"Category\")',\n      'a:has-text(\"Business Cards\")',\n      'a:has-text(\"Flyers\")'\n    ]\n\n    let categoryFound = false\n    for (const selector of categorySelectors) {\n      const categoryElement = page.locator(selector)\n      if (await categoryElement.isVisible()) {\n        categoryFound = true\n        console.log(`‚úÖ Category filter found: ${selector}`)\n        break\n      }\n    }\n\n    if (!categoryFound) {\n      console.log('‚ùå No category filtering found')\n    }\n\n    console.log('üìä Search and Filter Test Summary:')\n    console.log(`   Search functionality: ${searchFound}`)\n    console.log(`   Category filtering: ${categoryFound}`)\n  })\n})"