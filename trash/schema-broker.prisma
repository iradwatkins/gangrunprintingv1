// This is the simplified schema for Gang Run Printing as a PRINT BROKER
// We are NOT a physical printer - we resell/broker print services

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// AUTH MODELS (Keep existing auth system)
// ==========================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==========================================
// PRINT BROKER PRODUCT CATALOG
// ==========================================

// Simple paper stock catalog (no physical inventory)
model PaperStock {
  id               String    @id @default(cuid())
  name             String    @unique // "16pt C2S Cardstock", "100lb Gloss Cover"
  basePricePerUnit Decimal   @db.Decimal(10, 8) // Micro-pricing for calculations
  shippingWeight   Decimal   @db.Decimal(10, 4) // Weight per unit for shipping calc
  isActive         Boolean   @default(true)
  
  // Relations
  productPaperStocks ProductPaperStock[]
  paperStockSides    PaperStockSides[]
  paperStockCoatings PaperStockCoating[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Printing sides configurations
model SidesOption {
  id          String    @id @default(cuid())
  name        String    @unique // "Single Sided (4/0)", "Double Sided (4/4)"
  code        String    @unique // "4/0", "4/4", "4/1"
  description String?
  isDefault   Boolean   @default(false)
  
  paperStockSides PaperStockSides[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Which sides options are available for each paper stock
model PaperStockSides {
  paperStockId    String
  sidesOptionId   String
  priceMultiplier Decimal  @default(1.0) @db.Decimal(4, 2)
  isEnabled       Boolean  @default(true)
  
  paperStock      PaperStock  @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  sidesOption     SidesOption @relation(fields: [sidesOptionId], references: [id], onDelete: Cascade)
  
  @@id([paperStockId, sidesOptionId])
  @@index([paperStockId])
  @@index([sidesOptionId])
}

// Coating options catalog
model CoatingOption {
  id             String    @id @default(cuid())
  name           String    @unique // "High Gloss UV", "Matte Aqueous", "No Coating"
  description    String?
  additionalCost Decimal?  @db.Decimal(10, 2) // Flat fee if applicable
  
  paperStockCoatings PaperStockCoating[]
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Which coatings are available for each paper stock
model PaperStockCoating {
  paperStockId   String
  coatingId      String
  isDefault      Boolean  @default(false)
  priceAdjustment Decimal? @db.Decimal(10, 2) // Stock-specific coating price
  
  paperStock     PaperStock    @relation(fields: [paperStockId], references: [id], onDelete: Cascade)
  coating        CoatingOption @relation(fields: [coatingId], references: [id], onDelete: Cascade)
  
  @@id([paperStockId, coatingId])
  @@index([paperStockId])
  @@index([coatingId])
}

// ==========================================
// QUANTITY AND SIZE MANAGEMENT
// ==========================================

// Reusable quantity sets for different products
model QuantityGroup {
  id          String      @id @default(cuid())
  name        String      // "Business Card Quantities", "Flyer Quantities"
  description String?
  isActive    Boolean     @default(true)
  
  quantities  Quantity[]
  products    Product[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Quantity {
  id              String        @id @default(cuid())
  quantityGroupId String
  value           Int           // 100, 250, 500, 1000, 2500, 5000
  isDefault       Boolean       @default(false)
  sortOrder       Int           @default(0)
  
  quantityGroup   QuantityGroup @relation(fields: [quantityGroupId], references: [id], onDelete: Cascade)
  
  @@index([quantityGroupId])
}

// Reusable size sets for different products
model SizeGroup {
  id          String    @id @default(cuid())
  name        String    // "Flyer Sizes", "Business Card Sizes", "Poster Sizes"
  description String?
  isActive    Boolean   @default(true)
  
  sizes       Size[]
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Size {
  id           String    @id @default(cuid())
  sizeGroupId  String
  width        Decimal   @db.Decimal(10, 2) // inches
  height       Decimal   @db.Decimal(10, 2) // inches
  displayName  String    // "4x6", "8.5x11", "Standard Business Card"
  squareInches Decimal   @db.Decimal(10, 2) // Pre-calculated for pricing
  isDefault    Boolean   @default(false)
  sortOrder    Int       @default(0)
  
  sizeGroup    SizeGroup @relation(fields: [sizeGroupId], references: [id], onDelete: Cascade)
  
  @@index([sizeGroupId])
}

// ==========================================
// PRODUCT CONFIGURATION
// ==========================================

// Product templates that customers can order
model Product {
  id              String    @id @default(cuid())
  name            String    // "Flyers", "Business Cards", "Postcards"
  sku             String    @unique
  description     String?
  quantityGroupId String
  sizeGroupId     String
  baseMarkup      Decimal   @default(1.5) @db.Decimal(4, 2) // 50% markup default
  turnaroundDays  Int       @default(5) // Standard production time
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  
  quantityGroup      QuantityGroup @relation(fields: [quantityGroupId], references: [id])
  sizeGroup          SizeGroup @relation(fields: [sizeGroupId], references: [id])
  productPaperStocks ProductPaperStock[]
  orders             Order[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([sku])
  @@index([quantityGroupId])
  @@index([sizeGroupId])
}

// Link products to available paper stocks
model ProductPaperStock {
  id              String    @id @default(cuid())
  productId       String
  paperStockId    String
  isDefault       Boolean   @default(false)
  customPriceOverride Decimal? @db.Decimal(10, 2)
  
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  paperStock      PaperStock @relation(fields: [paperStockId], references: [id])
  
  @@unique([productId, paperStockId])
  @@index([productId])
  @@index([paperStockId])
}

// ==========================================
// ORDER MANAGEMENT (Broker Orders)
// ==========================================

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  // Customer info
  email           String
  phone           String?
  companyName     String?
  
  // Product configuration (what customer ordered)
  productId       String
  product         Product     @relation(fields: [productId], references: [id])
  quantity        Int
  size            String      // Stored as "4x6" for reference
  paperStock      String      // Stored name for reference
  sidesOption     String      // Stored as "4/4" for reference
  coating         String      // Stored coating name
  
  // Pricing
  calculatedPrice Decimal     @db.Decimal(10, 2)
  shippingCost    Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  totalAmount     Decimal     @db.Decimal(10, 2)
  
  // Broker status tracking
  status          OrderStatus @default(PENDING_QUOTE)
  printerStatus   String?     // Status from actual printer
  trackingNumber  String?
  
  // Files
  artworkUrl      String?     // Customer's uploaded artwork
  proofUrl        String?     // Proof from printer
  
  // Important dates
  orderedAt       DateTime    @default(now())
  sentToPrinterAt DateTime?   // When we sent to actual printer
  completedAt     DateTime?
  
  // Notes
  customerNotes   String?
  internalNotes   String?     // Our notes
  printerNotes    String?     // Notes from printer
  
  // N8N Integration
  webhookEvents   WebhookEvent[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([orderNumber])
  @@index([userId])
  @@index([status])
}

// N8N Webhook events for order status updates
model WebhookEvent {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id])
  eventType   String    // "status_update", "proof_ready", "shipped"
  payload     Json      // Raw webhook data
  processedAt DateTime?
  
  createdAt   DateTime  @default(now())
  
  @@index([orderId])
  @@index([eventType])
}

// ==========================================
// ENUMS
// ==========================================

enum UserRole {
  CUSTOMER
  ADMIN
  BROKER_STAFF // New role for your team
}

enum OrderStatus {
  PENDING_QUOTE      // Customer submitted, waiting for our quote
  QUOTED            // We've sent a quote to customer
  PENDING_PAYMENT   // Customer approved, waiting for payment
  PAID              // Payment received
  SENT_TO_PRINTER   // We've sent to actual printer
  IN_PRODUCTION     // Printer is working on it
  PROOF_READY       // Printer sent proof
  PROOF_APPROVED    // Customer approved proof
  PRINTING          // In actual production
  FINISHING         // Post-print processing
  QUALITY_CHECK     // Printer QC
  SHIPPED           // Sent to customer
  DELIVERED         // Customer received
  CANCELLED         // Order cancelled
  REFUNDED          // Money returned
}