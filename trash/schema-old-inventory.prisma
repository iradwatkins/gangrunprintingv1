generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  // Customer info
  email           String
  phone           String?
  
  // Order details
  status          OrderStatus @default(PENDING_PAYMENT)
  items           OrderItem[]
  files           File[]
  
  // Square integration (SINGLE SDK)
  squareOrderId   String?
  squarePaymentId String?
  squareCustomerId String?
  
  // Pricing
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  refundAmount    Float?
  paidAt          DateTime?
  refundedAt      DateTime?
  
  // Shipping
  shippingAddress Json
  shippingMethod  String?
  trackingNumber  String?
  carrier         Carrier?
  
  // Metadata
  adminNotes      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deleteAt        DateTime    @default(dbgenerated("(NOW() + '1 year'::interval)"))
  
  // Relations
  statusHistory   StatusHistory[]
  notifications   Notification[]
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productName String
  productSku  String
  quantity    Int
  price       Float
  options     Json?    // Size, paper type, etc.
  
  createdAt   DateTime @default(now())
}

model File {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  filename    String
  fileUrl     String   // MinIO URL
  fileSize    Int
  mimeType    String
  uploadedBy  String
  metadata    Json?    // DPI, dimensions, etc.
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  fromStatus OrderStatus?
  toStatus   OrderStatus
  notes      String?
  changedBy  String?
  
  createdAt  DateTime   @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  
  type      NotificationType
  sent      Boolean  @default(false)
  sentAt    DateTime?
  error     String?
  
  createdAt DateTime @default(now())
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  PROCESSING
  PRINTING
  QUALITY_CHECK
  PACKAGING
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PAYMENT_FAILED
}

enum Carrier {
  FEDEX
  UPS
  SOUTHWEST_CARGO
}

enum NotificationType {
  ORDER_CONFIRMED
  PAYMENT_RECEIVED
  ORDER_PROCESSING
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_REFUNDED
}

// Product Management Models
model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  sku             String    @unique
  description     String?
  shortDescription String?
  
  // Category
  categoryId      String
  category        ProductCategory @relation(fields: [categoryId], references: [id])
  
  // Pricing
  basePrice       Float
  setupFee        Float     @default(0)
  
  // Production
  productionTime  Int       // in business days
  rushAvailable   Boolean   @default(false)
  rushDays        Int?      // rush production time
  rushFee         Float?    // additional fee for rush
  
  // Gang Run Settings
  gangRunEligible Boolean   @default(false)
  minGangQuantity Int?
  maxGangQuantity Int?
  
  // Status
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  
  // Relations
  images          ProductImage[]
  options         ProductOption[]
  paperStocks     ProductPaperStock[]
  pricingTiers    PricingTier[]
  
  // Metadata
  metadata        Json?     // Additional product-specific data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([slug])
  @@index([categoryId])
}

model ProductImage {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url         String    // MinIO URL
  thumbnailUrl String?  // Optimized thumbnail
  alt         String?
  caption     String?
  sortOrder   Int       @default(0)
  isPrimary   Boolean   @default(false)
  
  // Image metadata
  width       Int?
  height      Int?
  fileSize    Int?
  mimeType    String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
}

model PaperStock {
  id          String    @id @default(cuid())
  name        String    @unique
  category    String    // e.g., "Cover", "Text", "Specialty"
  weight      String    // e.g., "100lb", "80lb"
  finish      String    // e.g., "Gloss", "Matte", "Uncoated", "Silk"
  coating     String    @default("None")   // e.g., "UV", "Aqueous", "None"
  sides       String    @default("Double")  // "Single" or "Double" - for coating application
  
  // Stock levels
  sheetsInStock Int     @default(0)
  reorderPoint  Int     @default(1000)
  reorderQuantity Int   @default(5000)
  
  // Pricing
  costPerSheet  Float
  priceMultiplier Float @default(1.0) // Applied to base product price
  
  // Specifications
  thickness     Float?   // in points
  opacity       Int?     // percentage
  brightness    Int?     // percentage
  
  isActive      Boolean  @default(true)
  isEcoFriendly Boolean  @default(false)
  
  products      ProductPaperStock[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductPaperStock {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  paperStockId String
  paperStock  PaperStock @relation(fields: [paperStockId], references: [id])
  
  isDefault   Boolean   @default(false)
  additionalCost Float  @default(0)
  
  @@unique([productId, paperStockId])
  @@index([productId])
  @@index([paperStockId])
}

model ProductOption {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name        String    // e.g., "Size", "Finish", "Binding"
  type        OptionType
  required    Boolean   @default(false)
  
  values      OptionValue[]
  
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
}

model OptionValue {
  id          String    @id @default(cuid())
  optionId    String
  option      ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  value       String    // e.g., "8.5x11", "Laminated", "Saddle Stitch"
  displayName String?
  additionalCost Float  @default(0)
  isDefault   Boolean   @default(false)
  sortOrder   Int       @default(0)
  
  // For size options
  width       Float?    // in inches
  height      Float?    // in inches
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([optionId])
}

model PricingTier {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  minQuantity Int
  maxQuantity Int?      // null means no upper limit
  unitPrice   Float
  setupFee    Float     @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
  @@unique([productId, minQuantity])
}

enum OptionType {
  SELECT      // Dropdown selection
  RADIO       // Radio buttons
  CHECKBOX    // Multiple selection
  TEXT        // Text input
  NUMBER      // Number input
  FILE        // File upload
}